<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Komon</name>
    </assembly>
    <members>
        <member name="T:Komon.Contract.Client.ClientContext">
            <summary>
            Type that holds the context for a client instance, it has properties both for
            creating InProcess/InterProcess clients and transmitting user id.
            </summary>
        </member>
        <member name="P:Komon.Contract.Client.ClientContext.EndPointName">
            <summary>
            Endpoint namne of in configuration.
            </summary>
        </member>
        <member name="P:Komon.Contract.Client.ClientContext.UserFactory">
            <summary>
            Factory method to get an instance of the user that makes the call.
            </summary>
        </member>
        <member name="P:Komon.Contract.Client.ClientContext.SystemFactory">
            <summary>
            Factory method to get an instance of the system that the user is connected to.
            </summary>
        </member>
        <member name="T:Komon.Contract.Client.ClientType">
            <summary>
            Type of client uswed by KomonClientBase to take decision of how to create a client 
            </summary>
        </member>
        <member name="F:Komon.Contract.Client.ClientType.InProcess">
            <summary>
            The client is instantiated directly by the application, this also includes Async clients in process.
            </summary>
        </member>
        <member name="F:Komon.Contract.Client.ClientType.Soap">
            <summary>
            
            </summary>
        </member>
        <member name="F:Komon.Contract.Client.ClientType.Rest">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.Client.IRegisterService`1">
            <summary>
            Implement this interface to register your service so that the komon service factorty can pick it up.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Komon.Contract.Client.IRegisterService`1.Create(Komon.Contract.Client.ClientContext)">
            <summary>
            Function that creates a InProcess implementation of the interface
            </summary>
        </member>
        <member name="P:Komon.Contract.Client.IRegisterService`1.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Client.IRegisterService`1.GetEndPointName(Komon.Contract.KomonSystem)">
            <summary>
            Name of the endpoint in configuration
            </summary>
        </member>
        <member name="T:Komon.Contract.Client.IRegisterServiceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Client.IRegisterServiceExtensions.ToContext``1(Komon.Contract.Client.IRegisterService{``0},System.Func{Komon.Contract.KomonUser},System.Func{Komon.Contract.KomonSystem})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reg"></param>
            <param name="user"></param>
            <param name="sys"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.Client.ServiceFactory">
            <summary>
            An object that is used to create objects to communicate with the logic layer.
            Should be used by UI:s and clients.
            </summary>
        </member>
        <member name="P:Komon.Contract.Client.ServiceFactory.Definitions">
            <summary>
            Contains all defined services in the system
            </summary>
        </member>
        <member name="M:Komon.Contract.Client.ServiceFactory.IsInProcessAvailable``1(Komon.Contract.KomonUser,Komon.Contract.KomonSystem)">
            <summary>
            Property that tells if an InProcess implementation is avaiable for an interface.
            </summary>
            <typeparam name="T">The interface to check</typeparam>
            <param name="user">The InternetSystem that we want to check availibity for, default none</param>
            <param name="system">The InternetSystem that we want to check availibity for, default none</param>
            <returns>True if all requirements for the an InProcess implementation is met.</returns>
        </member>
        <member name="M:Komon.Contract.Client.ServiceFactory.Create``1(Komon.Contract.Client.ClientContext,Komon.Contract.Client.ServiceType)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.Client.ServiceFactory.Create``1(System.Func{Komon.Contract.KomonUser},System.Func{Komon.Contract.KomonSystem},Komon.Contract.Client.ServiceType)">
            <summary>
            Create a object that implements the requested interface
            </summary>
            <typeparam name="T">Interface to create</typeparam>
            <param name="userFactory">Factory to get user information, it's used to communicate user info to lower layers.</param>
            <param name="systemFactory">Internet System to target, default value is none</param>
            <param name="type">Type of service, default value is detect.</param>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.Client.ServiceType">
            <summary>
            Defines what kind of implementation the ServiceFactory will create.
            </summary>
        </member>
        <member name="F:Komon.Contract.Client.ServiceType.InProcess">
            <summary>
            A implementation of the interface that goes directly to the database using 
            the default facade. It's required that the client has all the dll:s needed and
            the database should be reachable.
            </summary>
        </member>
        <member name="F:Komon.Contract.Client.ServiceType.InterProcess">
            <summary>
            A implementation of the interface that goes over a webbservice is created.
            </summary>
        </member>
        <member name="F:Komon.Contract.Client.ServiceType.Detect">
            <summary>
            The Factory is detecting if it's possible to create an InProcess implementation 
            and if it is it will create one, if it's not possible it will try to create a 
            InterProcess object.
            </summary>
        </member>
        <member name="T:Komon.Contract.Configuration.ContractConfiguration">
            <summary>
            A configuration section for komons contract layer
            </summary>
        </member>
        <member name="T:Komon.Contract.Configuration.ContractConfiguration.UserStoreElement">
            <summary>
            Configuration for the UserStore is used by KomonSecurity to be able to lookup user.
            </summary>
        </member>
        <member name="P:Komon.Contract.Configuration.ContractConfiguration.UserStoreElement.ClientId">
            <summary>
            Guid for the client that is used to get user info
            </summary>
        </member>
        <member name="P:Komon.Contract.Configuration.ContractConfiguration.UserStoreElement.SystemId">
            <summary>
            The system the client is connected to
            </summary>
        </member>
        <member name="P:Komon.Contract.Configuration.ContractConfiguration.UserStoreElement.IsClient">
            <summary>
            The store shall be taken from the registry, this is a hack for offline scenarios.
            </summary>
        </member>
        <member name="P:Komon.Contract.Configuration.ContractConfiguration.UserStore">
            <summary>
            Configuration for the UserStore is used by KomonSecurity to be able to lookup user.
            </summary>
        </member>
        <member name="T:Komon.Contract.Configuration.ContractConfiguration.ClientElement">
            <summary>
            Configuration for Service clients
            </summary>
        </member>
        <member name="P:Komon.Contract.Configuration.ContractConfiguration.ClientElement.Mock">
            <summary>
            True if Mock objects should be used if they exists
            </summary>
        </member>
        <member name="P:Komon.Contract.Configuration.ContractConfiguration.Client">
            <summary>
            Configuration for Service clients
            </summary>
        </member>
        <member name="T:Komon.Contract.CategoryDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.CategoryDefinition.GroupId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.CategoryDefinition.SystemId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.CategoryDefinition.IsRequired">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.CategoryDefinition.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.CategoryDefinition.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.CategoryDefinition.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.CategoryDefinition.UpdatedBy">
            <summary>
            Client name of the user who updated the item in database
            </summary>
        </member>
        <member name="P:Komon.Contract.CategoryDefinition.UpdatedTime">
            <summary>
            Last updated time of item in database
            </summary>
        </member>
        <member name="M:Komon.Contract.CategoryDefinition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.CategoryDefinition.Validate(Komon.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.CategoryGroupDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.CategoryGroupDefinition.IsRequired">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.CategoryGroupDefinition.ModuleId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.CategoryGroupDefinition.ModuleName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.CategoryGroupDefinition.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.CategoryGroupDefinition.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.CategoryGroupDefinition.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.CategoryGroupDefinition.IncludeEmptyValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.CategoryGroupDefinition.DefaultCategoryId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.CategoryGroupDefinition.UpdatedBy">
            <summary>
            Client name of the user who updated the item in database
            </summary>
        </member>
        <member name="P:Komon.Contract.CategoryGroupDefinition.UpdatedTime">
            <summary>
            Last updated time of item in database
            </summary>
        </member>
        <member name="P:Komon.Contract.CategoryGroupDefinition.Items">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.CategoryGroupDefinition.Validate(Komon.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.CategoryGroupDefinition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.Entities.AuditEnabledEntity">
            <summary>
            Interface that should be added to entity interfaces if they support Audit, this is done by code generation.
            </summary>
        </member>
        <member name="T:Komon.Contract.Entities.AuditEntity">
            <summary>
            This interface should be added to a entity interface that is an audit row
            </summary>
        </member>
        <member name="P:Komon.Contract.Entities.AuditEntity.Id">
            <summary>
            Uniqe id
            </summary>
        </member>
        <member name="P:Komon.Contract.Entities.AuditEntity.CreatedBy">
            <summary>
            Name of the user who created this item
            </summary>
        </member>
        <member name="P:Komon.Contract.Entities.AuditEntity.CreatedTime">
            <summary>
            Time when the item was first created 
            </summary>
        </member>
        <member name="P:Komon.Contract.Entities.AuditEntity.UpdatedBy">
            <summary>
            Name of the user that last updated this item
            </summary>
        </member>
        <member name="P:Komon.Contract.Entities.AuditEntity.UpdatedTime">
            <summary>
            Time for the last update of this item.
            </summary>
        </member>
        <member name="P:Komon.Contract.Entities.AuditEntity.Version">
            <summary>
            Version of the object.
            </summary>
        </member>
        <member name="T:Komon.Contract.Entities.EntityBase">
            <summary>
            Base class for Entities where change tracking is needed
            </summary>
        </member>
        <member name="P:Komon.Contract.Entities.EntityBase.Id">
            <summary>
            Uniqe id
            </summary>
        </member>
        <member name="P:Komon.Contract.Entities.EntityBase.CreatedBy">
            <summary>
            Name of the user who created this item
            </summary>
        </member>
        <member name="P:Komon.Contract.Entities.EntityBase.CreatedTime">
            <summary>
            Time when the item was first created 
            </summary>
        </member>
        <member name="P:Komon.Contract.Entities.EntityBase.UpdatedBy">
            <summary>
            Name of the user that last updated this item
            </summary>
        </member>
        <member name="P:Komon.Contract.Entities.EntityBase.UpdatedTime">
            <summary>
            Time for the last update of this item.
            </summary>
        </member>
        <member name="P:Komon.Contract.Entities.EntityBase.Version">
            <summary>
            Version of the object.
            </summary>
        </member>
        <member name="T:Komon.Contract.Entities.HistoryEnabledEntity">
            <summary>
            Interface that should be added to entity interfaces if they support history, this is done by code generation.
            </summary>
        </member>
        <member name="T:Komon.Contract.Entities.HistoryEntity">
            <summary>
            This interface should be added to a entity interface that is an audit row
            </summary>
        </member>
        <member name="T:Komon.Contract.Entities.KomonEntity">
            <summary>
            Interface for Entities in a komon model
            </summary>
        </member>
        <member name="T:Komon.Contract.DomainContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.DomainContext.#ctor(Komon.Contract.KomonUser,Komon.Contract.KomonSystem)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <param name="system"></param>
        </member>
        <member name="M:Komon.Contract.DomainContext.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.DomainContext.User">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.DomainContext.System">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.DomainContext.CreateModel``1">
            <summary>
            
            </summary>
            <typeparam name="TModel"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.DomainModelObjectBase`1">
            <summary>
            
            </summary>
            <typeparam name="TModel"></typeparam>
        </member>
        <member name="P:Komon.Contract.DomainModelObjectBase`1.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.DomainModelObjectBase`1.Version">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.DomainModelObjectBase`1.Context">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.DomainModelObjectBase`1.DomainModel">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.DomainObjectBase">
            <summary>
            Base class that inherits from NotifyBase and ads an implementation of IChangeTracking, and some other functions that can be good for the domain.
            </summary>
        </member>
        <member name="P:Komon.Contract.DomainObjectBase.IsUpdating">
            <summary>
            Property that can be used to signaling that the object is being updated. This is set by the user of the object.
            </summary>
        </member>
        <member name="M:Komon.Contract.DomainObjectBase.#ctor">
            <summary>
            Constructor, creates the object and hooks up event listeners
            </summary>
        </member>
        <member name="M:Komon.Contract.DomainObjectBase.AcceptChanges">
            <summary>
            Resets the object’s state to unchanged by accepting the modifications.
            </summary>
        </member>
        <member name="M:Komon.Contract.DomainObjectBase.RollbackChanges">
            <summary>
            Rollback the changes that has been made since last time acceptchanges was called.
            </summary>
        </member>
        <member name="M:Komon.Contract.DomainObjectBase.MarkAsChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.DomainObjectBase.IsChanged">
            <summary>
            Gets the object's changed status. Returns true if the object’s content has changed since the last call to System.ComponentModel.IChangeTracking.AcceptChanges();
            otherwise, false.
            </summary>
        </member>
        <member name="P:Komon.Contract.DomainObjectBase.IsChangedBackend">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.DomainObjectBase.Error">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.DomainObjectBase.Item(System.String)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:Komon.Contract.DomainObjectBase.Errors">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.DomainObjectBase.HasErrors">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.DomainObjectBase.IsValidAndIsChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.DomainObjectBase.Validate(Komon.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.KomonArgument">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonArgument.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonArgument.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonArgument.DefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonArgument.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonArgument.Options">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.KomonArgumentType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Komon.Contract.KomonArgumentType.Boolean">
            <summary>
            
            </summary>
        </member>
        <member name="F:Komon.Contract.KomonArgumentType.Integer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Komon.Contract.KomonArgumentType.Double">
            <summary>
            
            </summary>
        </member>
        <member name="F:Komon.Contract.KomonArgumentType.Enum">
            <summary>
            
            </summary>
        </member>
        <member name="F:Komon.Contract.KomonArgumentType.String">
            <summary>
            
            </summary>
        </member>
        <member name="F:Komon.Contract.KomonArgumentType.DateTime">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.LanguageTag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTag.IsEditable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTag.IsRequired">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTag.Translations">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTag.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTag.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTag.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTag.DefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTag.ModuleId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTag.ModuleName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTag.FirstCategoryId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTag.FirstCategoryName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTag.SecondCategoryId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTag.SecondCategoryName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTag.UpdatedBy">
            <summary>
            Client name of the user who updated the item in database
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTag.UpdatedTime">
            <summary>
            Last updated time of item in database
            </summary>
        </member>
        <member name="M:Komon.Contract.LanguageTag.Validate(Komon.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.LanguageTag.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.LanguageTranslation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTranslation.DefinitionId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTranslation.RegionName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTranslation.CultureName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTranslation.TagId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTranslation.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTranslation.ModuleName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTranslation.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTranslation.SystemId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTranslation.SystemName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTranslation.FirstCategory">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTranslation.SecondCategory">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTranslation.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTranslation.UpdatedBy">
            <summary>
            Client name of the user who updated the item in database
            </summary>
        </member>
        <member name="P:Komon.Contract.LanguageTranslation.UpdatedTime">
            <summary>
            Last updated time of item in database
            </summary>
        </member>
        <member name="M:Komon.Contract.LanguageTranslation.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.LogOnResponse">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LogOnResponse.User">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LogOnResponse.PromptChangePassword">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.LogOnResponse.Success">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.MapDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.MapDefinition.IsRequired">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.MapDefinition.ModuleId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.MapDefinition.ModuleName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.MapDefinition.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.MapDefinition.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.MapDefinition.FromTypeId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.MapDefinition.FromType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.MapDefinition.ToTypeId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.MapDefinition.ToType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.MapDefinition.UpdatedBy">
            <summary>
            Client name of the user who updated the item in database
            </summary>
        </member>
        <member name="P:Komon.Contract.MapDefinition.UpdatedTime">
            <summary>
            Last updated time of item in database
            </summary>
        </member>
        <member name="P:Komon.Contract.MapDefinition.MapTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.MapDefinition.Validate(Komon.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.MapDefinition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.MapItemDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.MapItemDefinition.MapId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.MapItemDefinition.FromValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.MapItemDefinition.ToValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.MapItemDefinition.UpdatedBy">
            <summary>
            Client name of the user who updated the item in database
            </summary>
        </member>
        <member name="P:Komon.Contract.MapItemDefinition.UpdatedTime">
            <summary>
            Last updated time of item in database
            </summary>
        </member>
        <member name="M:Komon.Contract.MapItemDefinition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.ParameterDefinition">
            <summary>
            A Komon parameter that is specific for a system
            </summary>
        </member>
        <member name="P:Komon.Contract.ParameterDefinition.IsEditable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.ParameterDefinition.IsRequired">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.ParameterDefinition.Name">
            <summary>
            Name of the parameter
            </summary>
        </member>
        <member name="P:Komon.Contract.ParameterDefinition.ModuleId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.ParameterDefinition.ModuleName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.ParameterDefinition.Description">
            <summary>
            Comment to the parameter
            </summary>
        </member>
        <member name="P:Komon.Contract.ParameterDefinition.TypeId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.ParameterDefinition.TypeName">
            <summary>
            .net type of the parameter
            </summary>
        </member>
        <member name="P:Komon.Contract.ParameterDefinition.DefaultValue">
            <summary>
            Default value for the parameter
            </summary>
        </member>
        <member name="P:Komon.Contract.ParameterDefinition.SystemParameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.ParameterDefinition.UpdatedBy">
            <summary>
            Client name of the user who updated the item in database
            </summary>
        </member>
        <member name="P:Komon.Contract.ParameterDefinition.UpdatedTime">
            <summary>
            Last updated time of item in database
            </summary>
        </member>
        <member name="M:Komon.Contract.ParameterDefinition.Validate(Komon.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.ParameterDefinition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.SystemParameter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.SystemParameter.SystemId">
            <summary>
            Uniqe id of the system the parameter is defined in
            </summary>
        </member>
        <member name="P:Komon.Contract.SystemParameter.SystemName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.SystemParameter.ParameterId">
            <summary>
            Uniqe id of the system the parameter is defined in
            </summary>
        </member>
        <member name="P:Komon.Contract.SystemParameter.Name">
            <summary>
            Name of the parameter
            </summary>
        </member>
        <member name="P:Komon.Contract.SystemParameter.ModuleName">
            <summary>
            Name of the module where the parameter is defined
            </summary>
        </member>
        <member name="P:Komon.Contract.SystemParameter.Description">
            <summary>
            Comment to the parameter
            </summary>
        </member>
        <member name="P:Komon.Contract.SystemParameter.TypeName">
            <summary>
            .net type of the parameter
            </summary>
        </member>
        <member name="P:Komon.Contract.SystemParameter.TypeId">
            <summary>
            .net type of the parameter
            </summary>
        </member>
        <member name="P:Komon.Contract.SystemParameter.Value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="P:Komon.Contract.SystemParameter.UpdatedBy">
            <summary>
            Client name of the user who updated the item in database
            </summary>
        </member>
        <member name="P:Komon.Contract.SystemParameter.UpdatedTime">
            <summary>
            Last updated time of item in database
            </summary>
        </member>
        <member name="M:Komon.Contract.SystemParameter.Validate(Komon.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.SystemParameter.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.TrendGroupDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.TrendGroupDefinition.ModuleId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.TrendGroupDefinition.ModuleName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.TrendGroupDefinition.ActionId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.TrendGroupDefinition.ActionName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.TrendGroupDefinition.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.TrendGroupDefinition.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.TrendGroupDefinition.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.TrendGroupDefinition.AggregateTypeId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.TrendGroupDefinition.ValueTypeId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.TrendGroupDefinition.AccuracyTypeId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.TrendGroupDefinition.ValueType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.TrendGroupDefinition.AggregateType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.TrendGroupDefinition.AccuracyType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.TrendGroupDefinition.IsActive">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.TrendGroupDefinition.IsAutoGeneratingSeries">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.TrendGroupDefinition.UpdatedBy">
            <summary>
            Client name of the user who updated the item in database
            </summary>
        </member>
        <member name="P:Komon.Contract.TrendGroupDefinition.UpdatedTime">
            <summary>
            Last updated time of item in database
            </summary>
        </member>
        <member name="M:Komon.Contract.TrendGroupDefinition.Validate(Komon.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.TrendGroupDefinition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.TrendValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.TrendValue.#ctor(System.DateTime,System.Int32)">
            <summary>
            
            </summary>
            <param name="timestamp"></param>
            <param name="value"></param>
        </member>
        <member name="P:Komon.Contract.TrendValue.Timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.TrendValue.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.UserSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.UserSettings.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.UserSettings.Email">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.UserSettings.PhoneNumber">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.UserSettings.Validate(Komon.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.WorkflowContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowContext.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowContext.Steps">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowContext.Arguments">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowContext.StartTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowContext.ExecutionDate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.WorkflowDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowDefinition.ModuleName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowDefinition.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowDefinition.ActionName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowDefinition.ActionId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowDefinition.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowDefinition.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowDefinition.IsActive">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowDefinition.RestartExecution">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowDefinition.IsDaily">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowDefinition.Interval">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowDefinition.StartTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowDefinition.DaysToKeepLog">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowDefinition.LogFilePath">
            <summary>
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowDefinition.UpdatedBy">
            <summary>
            Client name of the user who updated the item in database
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowDefinition.UpdatedTime">
            <summary>
            Last updated time of item in database
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowDefinition.Steps">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowDefinition.Arguments">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.WorkflowDefinition.Validate(Komon.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.WorkflowLog">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowLog.Timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowLog.Severity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowLog.Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowLog.IsFirstRow">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.WorkflowLog.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.WorkflowStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowStatus.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowStatus.IsFinished">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowStatus.IsCustom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowStatus.ExecutionTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowStatus.ExecutionStartTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowStatus.ExecutionDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowStatus.StartedBy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowStatus.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.WorkflowStatusType">
            <summary>
            Status of the workflow 
            </summary>
        </member>
        <member name="F:Komon.Contract.WorkflowStatusType.InProgress">
            <summary>
            The Workflow is in progress
            </summary>
        </member>
        <member name="F:Komon.Contract.WorkflowStatusType.Completed">
            <summary>
            The workflow has finished
            </summary>
        </member>
        <member name="F:Komon.Contract.WorkflowStatusType.Queued">
            <summary>
            
            </summary>
        </member>
        <member name="F:Komon.Contract.WorkflowStatusType.Failed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Komon.Contract.WorkflowStatusType.Stopped">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.WorkflowStep">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowStep.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowStep.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowStep.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowStep.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowStep.Description">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.WorkflowStepDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowStepDefinition.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowStepDefinition.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowStepDefinition.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowStepDefinition.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowStepDefinition.IsActive">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowStepDefinition.UpdatedBy">
            <summary>
            Client name of the user who updated the item in database
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowStepDefinition.UpdatedTime">
            <summary>
            Last updated time of item in database
            </summary>
        </member>
        <member name="T:Komon.Contract.IWorkflowService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.IWorkflowService.QueueScheduledWorkflows(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.IWorkflowService.GetTriggeredWorkflows(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="workflows"></param>
            <returns>Item1 WorkflowStatusId, Item2: WorkflowName</returns>
        </member>
        <member name="M:Komon.Contract.IWorkflowService.GetWorkflowStatusConfiguration(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.IWorkflowService.UpdateWorkflowStatus(Komon.Contract.WorkflowStatus)">
            <summary>
            
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.IWorkflowService.GetWorkflows">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.IWorkflowService.QueueWorkflow(Komon.Contract.WorkflowContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.IWorkflowService.StopWorkflow(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Komon.Contract.IWorkflowService.GetWorkflowProgress(Komon.Contract.WorkflowProgressContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.IWorkflowService.GetConfiguration(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="module"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.WorkflowSummary">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowSummary.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowSummary.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowSummary.Steps">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.WorkflowProgress">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowProgress.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowProgress.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowProgress.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowProgress.CreatedBy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowProgress.StartTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowProgress.EndTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowProgress.StatusId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.WorkflowProgress.Length">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.WorkflowProgressContext">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.IWorkflowClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.IWorkflowClient.QueueScheduledWorkflows(System.Collections.Generic.List{System.String},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.IWorkflowClient.GetTriggeredWorkflows(System.Collections.Generic.List{System.String},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.IWorkflowClient.GetWorkflowStatusConfiguration(System.Guid,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.IWorkflowClient.UpdateWorkflowStatus(Komon.Contract.WorkflowStatus,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.IWorkflowClient.GetWorkflows(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.IWorkflowClient.QueueWorkflow(Komon.Contract.WorkflowContext,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.IWorkflowClient.StopWorkflow(System.Guid,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.IWorkflowClient.GetWorkflowProgress(Komon.Contract.WorkflowProgressContext,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.IWorkflowClient.GetConfiguration(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.Model.IDomainModel">
            <summary>
            Interface used to identify Komon Model objects 
            </summary>
        </member>
        <member name="P:Komon.Contract.Model.IDomainModel.UserFactory">
            <summary>
            Get a function that returns the current user, this needs to be a function since it could point to different storage locations in different application models
            </summary>
        </member>
        <member name="P:Komon.Contract.Model.IDomainModel.SystemFactory">
            <summary>
            Get a function that returns the current system, this needs to be a function since it could point to different storage locations in different application models
            </summary>
        </member>
        <member name="P:Komon.Contract.Model.IDomainModel.UserClient">
            <summary>
            Get an instance of the IUserManagementService interface
            </summary>
        </member>
        <member name="P:Komon.Contract.Model.IDomainModel.ResourceClient">
            <summary>
            Get an instance of the IResourceService interface
            </summary>
        </member>
        <member name="T:Komon.Contract.Model.DomainModelBase">
            <summary>
            Base implementation of the IDomainModel interface
            </summary>
        </member>
        <member name="P:Komon.Contract.Model.DomainModelBase.UserFactory">
            <summary>
            Get or set the function that points to the current user for the current application model.
            </summary>
        </member>
        <member name="P:Komon.Contract.Model.DomainModelBase.SystemFactory">
            <summary>
            Get or set the function that points to the current system for the current application model.
            </summary>
        </member>
        <member name="P:Komon.Contract.Model.DomainModelBase.UserClient">
            <summary>
            Get an instance of the IUserManagementService interface
            </summary>
        </member>
        <member name="P:Komon.Contract.Model.DomainModelBase.ResourceClient">
            <summary>
            Get an instance of the IResourceService interface
            </summary>
        </member>
        <member name="P:Komon.Contract.Model.DomainModelBase.WorkflowClient">
            <summary>
            Get an instance of the IWorkflowService interface
            </summary>
        </member>
        <member name="T:Komon.Contract.Model.KomonModel">
            <summary>
            A Domain model for the Komon Framework, includes base service and resources
            </summary>
        </member>
        <member name="P:Komon.Contract.Model.KomonModel.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.Model.KomonModelBase`1">
            <summary>
            A base class for domain models that adds a generic resource property to the domain model
            </summary>
            <typeparam name="TResource"></typeparam>
        </member>
        <member name="P:Komon.Contract.Model.KomonModelBase`1.Resource">
            <summary>
            Resources for the Module
            </summary>
        </member>
        <member name="M:Komon.Contract.Model.KomonModelBase`1.#ctor">
            <summary>
            Create a new instance of the Domain model
            </summary>
        </member>
        <member name="M:Komon.Contract.Model.KomonModelBase`1.CreateModel``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.ActionDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.ActionDefinition.IsRequired">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.ActionDefinition.ModuleId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.ActionDefinition.ModuleName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.ActionDefinition.TypeId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.ActionDefinition.TypeName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.ActionDefinition.AreaId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.ActionDefinition.AreaName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.ActionDefinition.ExpireDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.ActionDefinition.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.ActionDefinition.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.ActionDefinition.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.ActionDefinition.IsAvailableToUsers">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.ActionDefinition.UpdatedBy">
            <summary>
            Client name of the user who updated the item in database
            </summary>
        </member>
        <member name="P:Komon.Contract.ActionDefinition.UpdatedTime">
            <summary>
            Last updated time of item in database
            </summary>
        </member>
        <member name="M:Komon.Contract.ActionDefinition.Validate(Komon.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.ActionDefinition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.KomonModule">
            <summary>
            A class containing constants of names used to specify actions, parameters and language items
            </summary>
        </member>
        <member name="F:Komon.Contract.KomonModule.Name">
            <summary>
            Name of the Module
            </summary>
        </member>
        <member name="T:Komon.Contract.KomonModule.Actions">
            <summary>
            Defined actions in the module
            </summary>
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewSystems">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewActions">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.EditSystems">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ListSystems">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ListActions">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewLanguageDefinitions">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.EditActions">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.EditLanguageDefinitions">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewLanguageTags">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ListLanguageDefinitions">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ListLanguageTags">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewLanguageTranslations">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.EditLanguageTags">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.EditLanguageTranslations">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ListLanguageTranslations">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ListUsers">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewUsers">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.GetUser">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.GetUsers">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.EditUserType">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.EditUsers">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.EditUser">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ListRoles">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewRoles">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.EditRoles">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewTrends">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewTrendDefinitions">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewWorkflowDoneTimeTrend">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewWorkflowExecutionTimeTrend">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ListTrendDefinitions">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.EditTrendDefinitions">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.SubscribeToTrendDefinitions">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewTrendStartScreen">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewReports">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewLogs">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewAggregatedDebugReports">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewWorkflows">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewProcessStatusReports">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ExecuteMaintenanceWorkflow">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ExecuteTrendWorkflow">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewWorkflowDefinitions">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.EditWorkflowDefinitions">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ListWorkflowDefinitions">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ListParameterDefinitions">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewParameterDefinitions">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewParameters">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.EditParameterDefinitions">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ListParameters">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.EditParameters">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewCategories">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.EditCategories">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ListCategories">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewMappings">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ListMappings">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.EditMappings">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewCache">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ListCache">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.EditCache">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ViewUserGroup">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.ListUserGroup">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Actions.EditUserGroup">
            <summary></summary> 
        </member>
        <member name="T:Komon.Contract.KomonModule.LanguageTags">
            <summary>
            Defined languagetags in the module
            </summary>
        </member>
        <member name="F:Komon.Contract.KomonModule.LanguageTags.Save">
            <summary>This tag is used on save buttons in UI:s</summary> 
        </member>
        <member name="T:Komon.Contract.KomonModule.Parameters">
            <summary>
            Defined parameters in the module
            </summary>
        </member>
        <member name="F:Komon.Contract.KomonModule.Parameters.DaysToKeepVerboseLogs">
            <summary>Days to store verbose log messages</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Parameters.DaysToKeepTrendValues">
            <summary>Days to store trend values in the system</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Parameters.DaysToKeepInformationLogs">
            <summary>Days to store information log messages</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Parameters.DaysToKeepWarningLogs">
            <summary>Days to store warning log messages</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Parameters.DaysToKeepWorkflowStatusAudit">
            <summary>Days to store audit messages from workflow status</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Parameters.ResetPasswordMailSubject">
            <summary>Subject for a mail that is sent to the user when his password is reset</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Parameters.ResetPasswordMailBody">
            <summary>Body for mail that is sent to the user when his password is reset, {0} = username, {1} = password</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Parameters.ResetPasswordSms">
            <summary>Body for sms that is sent to the user when his password is reset, {0} = username, {1} = password</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Parameters.ResetPasswordPromptChangePassword">
            <summary>True if the default value for prompt user should be set</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Parameters.IsSystemMaintenance">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Parameters.SystemMaintenanceMessage">
            <summary></summary> 
        </member>
        <member name="T:Komon.Contract.KomonModule.Trends">
            <summary>
            Defined Trends in the module
            </summary>
        </member>
        <member name="F:Komon.Contract.KomonModule.Trends.WorkflowExecutionTimes">
            <summary>Monitors the execution time of workflows</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Trends.WorkflowDoneTime">
            <summary>Monitors at wich time a workflow has completed</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Trends.AggregatedLogs">
            <summary>Monitors at wich time a workflow has completed</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Trends.ServiceCalls">
            <summary>Monitors How many calls that is made to different service operations</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Trends.ServiceCallTimes">
            <summary>Monitors how long the meen time is for service operation calls</summary> 
        </member>
        <member name="T:Komon.Contract.KomonModule.Maps">
            <summary>
            Defined Maps in the module
            </summary>
        </member>
        <member name="F:Komon.Contract.KomonModule.Maps.WindowsClientMenu">
            <summary>Change the order and names of the views in the client application.</summary> 
        </member>
        <member name="T:Komon.Contract.KomonModule.Categories">
            <summary>
            Defined Categories in the module
            </summary>
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.Modules">
            <summary>Registered Komon Modules in the system.</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.ParameterType">
            <summary>.NET types that could be used in various dynamic columns.</summary> 
        </member>
        <member name="T:Komon.Contract.KomonModule.Categories.ParameterTypes">
            <summary>Defined items in the ParameterType category</summary>
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.ParameterTypes.SystemString">
            <summary>Text</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.ParameterTypes.SystemInt32">
            <summary>32 bit integer</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.ParameterTypes.SystemDateTime">
            <summary>date and time type</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.ParameterTypes.SystemBoolean">
            <summary>true or false</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.ParameterTypes.SystemDecimal">
            <summary>Decimal type</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.ParameterTypes.SystemChar">
            <summary>Char</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.ActionType">
            <summary></summary> 
        </member>
        <member name="T:Komon.Contract.KomonModule.Categories.ActionTypes">
            <summary>Defined items in the ActionType category</summary>
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.ActionTypes.Edit">
            <summary>Edit items of a type</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.ActionTypes.List">
            <summary>List items of a type</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.ActionTypes.View">
            <summary>View items of a type in a UI</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.ActionArea">
            <summary></summary> 
        </member>
        <member name="T:Komon.Contract.KomonModule.Categories.ActionAreas">
            <summary>Defined items in the ActionArea category</summary>
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.ActionAreas.Trend">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.ActionAreas.Workflow">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.ActionAreas.Resource">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.ActionAreas.System">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.LanguageTagType">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.MappingType">
            <summary></summary> 
        </member>
        <member name="T:Komon.Contract.KomonModule.Categories.MappingTypes">
            <summary>Defined items in the MappingType category</summary>
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.MappingTypes.SystemInt32">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.MappingTypes.SystemString">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.MappingTypes.SystemGuid">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.TrendValueType">
            <summary></summary> 
        </member>
        <member name="T:Komon.Contract.KomonModule.Categories.TrendValueTypes">
            <summary>Defined items in the TrendValueType category</summary>
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.TrendValueTypes.SystemInt32">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.TrendValueTypes.SystemTimeSpan">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.NotificationType">
            <summary></summary> 
        </member>
        <member name="T:Komon.Contract.KomonModule.Categories.NotificationTypes">
            <summary>Defined items in the NotificationType category</summary>
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.NotificationTypes.Daily">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.WatcherType">
            <summary></summary> 
        </member>
        <member name="T:Komon.Contract.KomonModule.Categories.WatcherTypes">
            <summary>Defined items in the WatcherType category</summary>
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.WatcherTypes.Max">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.WatcherTypes.Min">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.WatcherTypes.Interval">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.UserNotifyType">
            <summary></summary> 
        </member>
        <member name="T:Komon.Contract.KomonModule.Categories.UserNotifyTypes">
            <summary>Defined items in the UserNotifyType category</summary>
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.UserNotifyTypes.Sms">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.UserNotifyTypes.None">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.UserNotifyTypes.Mail">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.TrendAggregateType">
            <summary></summary> 
        </member>
        <member name="T:Komon.Contract.KomonModule.Categories.TrendAggregateTypes">
            <summary>Defined items in the TrendAggregateType category</summary>
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.TrendAggregateTypes.Add">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.TrendAggregateTypes.Mean">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.TrendAggregateTypes.Replace">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.TrendAggregateTypes.Max">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.TrendAggregateTypes.KeepOld">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.TrendAggregateTypes.Min">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.AccuracyType">
            <summary></summary> 
        </member>
        <member name="T:Komon.Contract.KomonModule.Categories.AccuracyTypes">
            <summary>Defined items in the AccuracyType category</summary>
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.AccuracyTypes.Hourly">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.AccuracyTypes.DayPart">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.AccuracyTypes.Daily">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.AccuracyTypes.Weekly">
            <summary></summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Categories.AccuracyTypes.Monthly">
            <summary></summary> 
        </member>
        <member name="T:Komon.Contract.KomonModule.Workflows">
            <summary>
            Defined Workflows in the module
            </summary>
        </member>
        <member name="F:Komon.Contract.KomonModule.Workflows.CoreMaintenanceWorkflow">
            <summary>Executes Maintenance tasks for Komon</summary> 
        </member>
        <member name="T:Komon.Contract.KomonModule.Workflows.CoreMaintenanceWorkflowSteps">
            <summary>Defined steps in the Komon Maintenance</summary>
        </member>
        <member name="F:Komon.Contract.KomonModule.Workflows.CoreMaintenanceWorkflowSteps.Initialize">
            <summary>Initialize the workflow</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Workflows.CoreMaintenanceWorkflowSteps.RebuildIndex">
            <summary>RebuildIndex</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Workflows.CoreMaintenanceWorkflowSteps.CleanOldData">
            <summary>CleanOldData</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Workflows.CoreMaintenanceWorkflowSteps.Complete">
            <summary>Complete the workflow and do whatever needed to cleanup after the workflow</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Workflows.TrendWorkflow">
            <summary>Checks TrendWatchers and collect trends</summary> 
        </member>
        <member name="T:Komon.Contract.KomonModule.Workflows.TrendWorkflowSteps">
            <summary>Defined steps in the Trend Workflow</summary>
        </member>
        <member name="F:Komon.Contract.KomonModule.Workflows.TrendWorkflowSteps.Initialize">
            <summary>Initialize the workflow</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Workflows.TrendWorkflowSteps.CollectTrends">
            <summary>CollectTrends</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Workflows.TrendWorkflowSteps.CheckTrendWatchers">
            <summary>CheckTrendWatchers</summary> 
        </member>
        <member name="F:Komon.Contract.KomonModule.Workflows.TrendWorkflowSteps.Complete">
            <summary>Complete the workflow and do whatever needed to cleanup after the workflow</summary> 
        </member>
        <member name="T:Komon.Contract.KomonLanguage">
            <summary>
            Translated Language tags for the Komon module 
            </summary>
        </member>
        <member name="M:Komon.Contract.KomonLanguage.#ctor(Komon.Contract.Model.DomainModelBase)">
            <summary>
            Create an instance of KomonLanguage
            </summary>
            <param name="model">An instance of a domain model</param>
        </member>
        <member name="P:Komon.Contract.KomonLanguage.Save">
            <summary>This tag is used on save buttons in UI:s</summary>
        </member>
        <member name="T:Komon.Contract.KomonCategories">
            <summary>
            Categories for the Komon module 
            </summary>
        </member>
        <member name="M:Komon.Contract.KomonCategories.#ctor(Komon.Contract.Model.DomainModelBase)">
            <summary>
            Create an instance of KomonCategories
            </summary>
            <param name="model">An instance of a domain model</param>
        </member>
        <member name="P:Komon.Contract.KomonCategories.NotifyTasks">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.Modules">
            <summary>Registered Komon Modules in the system.</summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.ParameterType">
            <summary>.NET types that could be used in various dynamic columns.</summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.ActionType">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.ActionArea">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.LanguageTagType">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.MappingType">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.TrendValueType">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.NotificationType">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.WatcherType">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.UserNotifyType">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.TrendAggregateType">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.AccuracyType">
            <summary></summary>
        </member>
        <member name="T:Komon.Contract.KomonCategories.KomonCategoryNotifyTasks">
            <summary></summary>
        </member>
        <member name="M:Komon.Contract.KomonCategories.KomonCategoryNotifyTasks.#ctor(Komon.Contract.Model.DomainModelBase)">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.KomonCategoryNotifyTasks.Modules">
            <summary>Registered Komon Modules in the system.</summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.KomonCategoryNotifyTasks.ParameterType">
            <summary>.NET types that could be used in various dynamic columns.</summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.KomonCategoryNotifyTasks.ActionType">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.KomonCategoryNotifyTasks.ActionArea">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.KomonCategoryNotifyTasks.LanguageTagType">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.KomonCategoryNotifyTasks.MappingType">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.KomonCategoryNotifyTasks.TrendValueType">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.KomonCategoryNotifyTasks.NotificationType">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.KomonCategoryNotifyTasks.WatcherType">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.KomonCategoryNotifyTasks.UserNotifyType">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.KomonCategoryNotifyTasks.TrendAggregateType">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonCategories.KomonCategoryNotifyTasks.AccuracyType">
            <summary></summary>
        </member>
        <member name="T:Komon.Contract.KomonMapping">
            <summary>
            Mappings for the Komon module 
            </summary>
        </member>
        <member name="M:Komon.Contract.KomonMapping.#ctor(Komon.Contract.Model.DomainModelBase)">
            <summary>
            Create an instance of KomonMapping
            </summary>
            <param name="model">An instance of a domain model</param>
        </member>
        <member name="P:Komon.Contract.KomonMapping.WindowsClientMenu">
            <summary>Change the order and names of the views in the client application.</summary>
        </member>
        <member name="T:Komon.Contract.KomonParameters">
            <summary>
            Parameters for the Komon module 
            </summary>
        </member>
        <member name="M:Komon.Contract.KomonParameters.#ctor(Komon.Contract.Model.DomainModelBase)">
            <summary>
            Create an instance of KomonParameters
            </summary>
            <param name="model">An instance of a domain model</param>
        </member>
        <member name="P:Komon.Contract.KomonParameters.DaysToKeepVerboseLogs">
            <summary>Days to store verbose log messages</summary>
        </member>
        <member name="P:Komon.Contract.KomonParameters.DaysToKeepTrendValues">
            <summary>Days to store trend values in the system</summary>
        </member>
        <member name="P:Komon.Contract.KomonParameters.DaysToKeepInformationLogs">
            <summary>Days to store information log messages</summary>
        </member>
        <member name="P:Komon.Contract.KomonParameters.DaysToKeepWarningLogs">
            <summary>Days to store warning log messages</summary>
        </member>
        <member name="P:Komon.Contract.KomonParameters.DaysToKeepWorkflowStatusAudit">
            <summary>Days to store audit messages from workflow status</summary>
        </member>
        <member name="P:Komon.Contract.KomonParameters.ResetPasswordMailSubject">
            <summary>Subject for a mail that is sent to the user when his password is reset</summary>
        </member>
        <member name="P:Komon.Contract.KomonParameters.ResetPasswordMailBody">
            <summary>Body for mail that is sent to the user when his password is reset, {0} = username, {1} = password</summary>
        </member>
        <member name="P:Komon.Contract.KomonParameters.ResetPasswordSms">
            <summary>Body for sms that is sent to the user when his password is reset, {0} = username, {1} = password</summary>
        </member>
        <member name="P:Komon.Contract.KomonParameters.ResetPasswordPromptChangePassword">
            <summary>True if the default value for prompt user should be set</summary>
        </member>
        <member name="P:Komon.Contract.KomonParameters.IsSystemMaintenance">
            <summary></summary>
        </member>
        <member name="M:Komon.Contract.KomonParameters.SetIsSystemMaintenance(System.Boolean)">
            <summary></summary>
        </member>
        <member name="P:Komon.Contract.KomonParameters.SystemMaintenanceMessage">
            <summary></summary>
        </member>
        <member name="M:Komon.Contract.KomonParameters.SetSystemMaintenanceMessage(System.String)">
            <summary></summary>
        </member>
        <member name="T:Komon.Contract.IRegisterModule">
            <summary>
            Interface used to register a model in a KomonSystem, it is used in initialization to add 
            Actions, Parameters and Language Items to the Komon database
            </summary>
        </member>
        <member name="P:Komon.Contract.IRegisterModule.Name">
            <summary>
            Name of the model
            </summary>
        </member>
        <member name="P:Komon.Contract.IRegisterModule.Actions">
            <summary>
            Actions used by the module
            </summary>
            <returns></returns>
        </member>
        <member name="P:Komon.Contract.IRegisterModule.Languages">
            <summary>
            Language items used by the module
            </summary>
            <returns></returns>
        </member>
        <member name="P:Komon.Contract.IRegisterModule.Parameters">
            <summary>
            Parameters used by the module
            </summary>
            <returns></returns>
        </member>
        <member name="P:Komon.Contract.IRegisterModule.Trends">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Komon.Contract.IRegisterModule.Maps">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Komon.Contract.IRegisterModule.Categories">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Komon.Contract.IRegisterModule.Workflows">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.KomonCacheItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonCacheItem.CachedTimestamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonCacheItem.Key">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonCacheItem.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonCacheItem.ExpireTime">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.KomonCategoryGroup">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.KomonCategoryGroup.#ctor(System.String,System.String,System.String,Komon.Contract.KomonCategory,System.Collections.Generic.List{Komon.Contract.KomonCategory})">
            <summary>
            
            </summary>
            <param name="moduleName"></param>
            <param name="name"></param>
            <param name="displayName"></param>
            <param name="categories"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="P:Komon.Contract.KomonCategoryGroup.Items">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonCategoryGroup.ModuleName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonCategoryGroup.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonCategoryGroup.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonCategoryGroup.Default">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonCategoryGroup.Item(System.String)">
            <summary>
            
            </summary>
            <param name="categoryName"></param>
            <returns></returns>
        </member>
        <member name="P:Komon.Contract.KomonCategoryGroup.Item(System.Guid)">
            <summary>
            
            </summary>
            <param name="categoryId"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.KomonCategoryGroup.GetDisplayName(System.Guid)">
            <summary>
            Returns the displat name, returns an empty string if the guid is empty
            </summary>
            <param name="categoryId"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.KomonMap">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.KomonMap.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.List{Komon.Contract.KomonMapItem})">
            <summary>
            
            </summary>
            <param name="moduleName"></param>
            <param name="name"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="mapTable"></param>
        </member>
        <member name="P:Komon.Contract.KomonMap.ModuleName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonMap.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonMap.From">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonMap.To">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonMap.MapTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.KomonMap.Map(System.String)">
            <summary>
            Tries to map the input if found in the map table te to value is returned, otherwise the input value is returned
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.KomonMapItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.KomonMapItem.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fromValue"></param>
            <param name="toValue"></param>
        </member>
        <member name="P:Komon.Contract.KomonMapItem.FromValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonMapItem.ToValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.Resource.KomonCache">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.KomonCache.#ctor(Komon.Contract.Model.DomainModelBase)">
            <summary>
            
            </summary>
            <param name="model"></param>
        </member>
        <member name="T:Komon.Contract.Resource.KomonMappingBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.KomonMappingBase.#ctor(Komon.Contract.Model.DomainModelBase)">
            <summary>
            Create an instance 
            </summary>
            <param name="model">An instance of a domain model</param>
        </member>
        <member name="M:Komon.Contract.Resource.KomonMappingBase.GetMapping(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="module"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.Resource.KomonMappingBase.GetMapItems(System.String,System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            
            </summary>
            <param name="module"></param>
            <param name="name"></param>
            <param name="fromValues"></param>
            <param name="compareToValues"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.Resource.KomonMappingBase.InsertMapItems(System.String,System.String,System.Collections.Generic.List{Komon.Contract.KomonMapItem})">
            <summary>
            
            </summary>
            <param name="module"></param>
            <param name="name"></param>
            <param name="values"></param>
        </member>
        <member name="M:Komon.Contract.Resource.KomonMappingBase.Map(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="module"></param>
            <param name="name"></param>
            <param name="fromValue"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.Resource.KomonCacheBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.KomonCacheBase.#ctor(Komon.Contract.Model.DomainModelBase)">
            <summary>
            Create an instance 
            </summary>
            <param name="model">An instance of a domain model</param>
        </member>
        <member name="M:Komon.Contract.Resource.KomonCacheBase.GetKeys">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.Resource.KomonCacheBase.SetValue(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Komon.Contract.Resource.KomonCacheBase.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.Resource.IResourceService">
            <summary>
            An interface for exposing resources in the komon system.
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceService.GetTranslations(System.String)">
            <summary>
            Get all Language tags in the system
            </summary>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceService.SetTranslations(System.String,Komon.Contract.KomonTranslation)">
            <summary>
            Set the text for a Language translation, creates a new tag if the tag does not exists
            </summary>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceService.GetParameters">
            <summary>
            Get all parameters for the current system
            </summary>
            <returns>A list of all the parameters defined in the current system</returns>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceService.SetParameter(Komon.Contract.KomonParameter)">
            <summary>
            Update the value of a parameter
            </summary>
            <param name="parameter">The parameter that should be updated in the database</param>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceService.GetCategoryGroups">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceService.GetCachedKeys">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceService.GetCachedItem(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceService.UpdateCachedItem(Komon.Contract.KomonCacheItem)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceService.DeleteCachedItem(Komon.Contract.KomonCacheItem)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceService.GetMap(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="module"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceService.GetMapItems(System.String,System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            
            </summary>
            <param name="module"></param>
            <param name="mapName"></param>
            <param name="values"></param>
            <param name="compareToValues"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceService.InsertMapItems(System.String,System.String,System.Collections.Generic.List{Komon.Contract.KomonMapItem})">
            <summary>
            
            </summary>
            <param name="module"></param>
            <param name="mapName"></param>
            <param name="fromValues"></param>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceService.Map(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="module"></param>
            <param name="name"></param>
            <param name="fromValue"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceService.GetCounterNextValue(System.String)">
            <summary>
            Get the next value in a counter
            </summary>
            <param name="name">Name of the counter</param>
            <returns>Next value in a counter</returns>
        </member>
        <member name="T:Komon.Contract.Resource.KomonCategoriesBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.KomonCategoriesBase.#ctor(Komon.Contract.Model.DomainModelBase)">
            <summary>
            Create an instance 
            </summary>
            <param name="model">An instance of a domain model</param>
        </member>
        <member name="M:Komon.Contract.Resource.KomonCategoriesBase.GetGroup(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="module"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.Resource.KomonLanguageBase">
            <summary>
            Base class for lookup of language tags
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.KomonLanguageBase.#ctor(Komon.Contract.Model.DomainModelBase)">
            <summary>
            Create an instance
            </summary>
            <param name="model">An instance of a Domain Model</param>
        </member>
        <member name="M:Komon.Contract.Resource.KomonLanguageBase.GetText(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="module"></param>
            <param name="tag"></param>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.Resource.KomonLanguageBase.GetText(System.String,System.String)">
            <summary>
            Get the translated string for a tag
            </summary>
            <param name="tag">The tag</param>
            <param name="cultureName"></param>
            <returns>String in right language</returns>
        </member>
        <member name="M:Komon.Contract.Resource.KomonLanguageBase.SetText(System.String,System.String,System.String,System.String)">
            <summary>
            Updates a text in the database, it adds the tag if it does not exist
            </summary>
            <param name="module"></param>
            <param name="tag"></param>
            <param name="cultureName"></param>
            <param name="text"></param>
        </member>
        <member name="T:Komon.Contract.Resource.KomonParametersBase">
            <summary>
            Base class for lookup of KomonParameters
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.KomonParametersBase.#ctor(Komon.Contract.Model.DomainModelBase)">
            <summary>
            Create an instance 
            </summary>
            <param name="model">An instance of a domain model</param>
        </member>
        <member name="M:Komon.Contract.Resource.KomonParametersBase.GetValue``1(System.String,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="module"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.Resource.KomonParametersBase.GetValue(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="module"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.Resource.KomonParametersBase.GetValue(System.String)">
            <summary>
            Get the value of a parameter
            </summary>
            <param name="key">The key of the parameter {Module}.{Key}</param>
            <returns>The value of the parameter</returns>
        </member>
        <member name="M:Komon.Contract.Resource.KomonParametersBase.SetValue(System.String,System.String)">
            <summary>
            Set the value of a parameter
            </summary>
            <param name="key">The key of the parameter</param>
            <param name="value">The value to set to the parameter</param>
        </member>
        <member name="T:Komon.Contract.Resource.IModuleResources">
            <summary>
            An interface to mark an object as a Module Resource used in Generic methods.
            </summary>
        </member>
        <member name="T:Komon.Contract.Resource.KomonResourceBase`5">
            <summary>
            Base class for resorces for a Komon Module
            </summary>
            <typeparam name="TParameters">Type that contains the parameters for the module</typeparam>
            <typeparam name="TLanguages">Type that contains the Language items for the module</typeparam>
            <typeparam name="TCache"></typeparam>
            <typeparam name="TMapping"></typeparam>
            <typeparam name="TCategory"></typeparam>
        </member>
        <member name="M:Komon.Contract.Resource.KomonResourceBase`5.#ctor(Komon.Contract.Model.DomainModelBase)">
            <summary>
            Create an instance
            </summary>
            <param name="model">an instance of an domain Model</param>
        </member>
        <member name="P:Komon.Contract.Resource.KomonResourceBase`5.Language">
            <summary>
            Language items for the Module
            </summary>
        </member>
        <member name="P:Komon.Contract.Resource.KomonResourceBase`5.Parameters">
            <summary>
            Parameters for the module
            </summary>
        </member>
        <member name="P:Komon.Contract.Resource.KomonResourceBase`5.Cache">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.Resource.KomonResourceBase`5.Mapping">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.Resource.KomonResourceBase`5.Category">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.Resource.IResourceClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceClient.GetTranslations(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceClient.SetTranslations(System.String,Komon.Contract.KomonTranslation,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceClient.GetParameters(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceClient.SetParameter(Komon.Contract.KomonParameter,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceClient.GetCategoryGroups(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceClient.GetCachedKeys(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceClient.GetCachedItem(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceClient.UpdateCachedItem(Komon.Contract.KomonCacheItem,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceClient.DeleteCachedItem(Komon.Contract.KomonCacheItem,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceClient.GetMap(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceClient.GetMapItems(System.String,System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceClient.InsertMapItems(System.String,System.String,System.Collections.Generic.List{Komon.Contract.KomonMapItem},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceClient.Map(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Resource.IResourceClient.GetCounterNextValue(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.KomonCategory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.KomonCategory.#ctor(System.Guid,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="displayName"></param>
        </member>
        <member name="P:Komon.Contract.KomonCategory.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonCategory.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonCategory.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.KomonCategory.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.KomonTranslation">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.KomonTranslation.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="moduleName"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:Komon.Contract.KomonTranslation.ModuleName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonTranslation.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonTranslation.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.KomonParameter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.KomonParameter.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="moduleName"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:Komon.Contract.KomonParameter.ModuleName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonParameter.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonParameter.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.KomonResource">
            <summary>
            Resources for the Komon Framework
            </summary>
        </member>
        <member name="M:Komon.Contract.KomonResource.#ctor(Komon.Contract.Model.DomainModelBase)">
            <summary>
            Create an instance
            </summary>
            <param name="model"></param>
        </member>
        <member name="T:Komon.Contract.Security.IAuthorization">
            <summary>
            Autorization functionality
            </summary>
        </member>
        <member name="M:Komon.Contract.Security.IAuthorization.HasAccess(Komon.Contract.KomonUser,Komon.Contract.KomonSystem,System.String,System.String)">
            <summary>
            Check if a user have access to a specific operation in a System.
            </summary>
            <param name="user">User to check</param>
            <param name="system">The System to run the check against</param>
            <param name="contract">Name of the interface</param>
            <param name="operation">Name of the operation</param>
            <returns>true if the user has access to the operation, null if there are no restrictions on the method</returns>
        </member>
        <member name="M:Komon.Contract.Security.IAuthorization.HasAccess(Komon.Contract.KomonUser,Komon.Contract.KomonSystem,Komon.Contract.KomonAction)">
            <summary>
            Check if a user have access to a specific operation in a System.
            </summary>
            <param name="user">User to check</param>
            <param name="system">The System to run the check against</param>
            <param name="action">The action ro check for</param>
            <returns>true if the user has access to the action</returns>
        </member>
        <member name="M:Komon.Contract.Security.IAuthorization.HasAccess(Komon.Contract.KomonUser,Komon.Contract.KomonSystem,System.Guid)">
            <summary>
            Check if a user have access to a specific operation in a System.
            </summary>
            <param name="user">User to check</param>
            <param name="system">The System to run the check against</param>
            <param name="actionId">The action ro check for</param>
            <returns>true if the user has access to the action</returns>
        </member>
        <member name="M:Komon.Contract.Security.IAuthorization.HasAccess(System.String,System.String)">
            <summary>
            Check if a user have access to a specific operation in a System.
            </summary>
            <param name="komonModule">The System to run the check against</param>
            <param name="action">The action ro check for</param>
            <returns>true if the user has access to the action</returns>
        </member>
        <member name="P:Komon.Contract.Security.IAuthorization.UserFactory">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.Security.IAuthorization.SystemFactory">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.Security.IKomonGate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.Security.KomonAuthorization">
            <summary>
            Default implementation of the Komon IAutorization interface.
            </summary>
        </member>
        <member name="T:Komon.Contract.Security.KomonSecurity">
            <summary>
            Provides functionality related to Authentication and Autorization
            </summary>
        </member>
        <member name="P:Komon.Contract.Security.KomonSecurity.Authorization">
            <summary>
            Authorization functionality
            </summary>
        </member>
        <member name="P:Komon.Contract.Security.KomonSecurity.UserStore">
            <summary>
            Authorization functionality
            </summary>
        </member>
        <member name="M:Komon.Contract.Security.KomonSecurity.Register``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
        </member>
        <member name="T:Komon.Contract.Security.IUserStore">
            <summary>
            Interface that contains functionality for handling users in a system
            this interface can have many implementations and behaves differently 
            in different application models.
            </summary>
        </member>
        <member name="P:Komon.Contract.Security.IUserStore.CachedUsers">
            <summary>
            A user cache, can be used to get a fast lookup of users.
            This is only aviable on servers.
            </summary>
        </member>
        <member name="M:Komon.Contract.Security.IUserStore.Refresh">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Security.IUserStore.GetUser(System.String)">
            <summary>
            
            </summary>
            <param name="clientName"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.Security.KomonAuthorizationAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Security.KomonAuthorizationAttribute.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.Security.KomonAuthorizationAttribute.Action">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.Security.KomonAuthorizationAttribute.Module">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.Service.IKomonService">
            <summary>
            Base interface for A Service interface in the Komon framework,
            used in various generic methods.
            </summary>
        </member>
        <member name="T:Komon.Contract.Service.IKomonFacade">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.Service.IKomonFacade.IsAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.Service.IKomonFacade.SetUser(System.Guid,System.Guid)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="systemId"></param>
        </member>
        <member name="P:Komon.Contract.Service.IKomonFacade.User">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.Service.IKomonFacade.System">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Contract.Service.IKomonFacade.CancellationToken">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.Users.IUserProvider">
            <summary>
            An interface that could be used to add users that exists somewhere else to a komon system,
            </summary>
        </member>
        <member name="M:Komon.Contract.Users.IUserProvider.GetUsersToImpersonate(System.Collections.Generic.List{Komon.Contract.KomonUser})">
            <summary>
            Build a sequence of the komon users to add togheter with the Id of the user that they should impersonate
            </summary>
            <param name="impersonateUsers">The users defined in komon as impersonate</param>
            <returns>A sequence of id of the user to impersonate and wich users to connect to him</returns>
        </member>
        <member name="M:Komon.Contract.Users.IUserProvider.LogOn(System.String,System.String)">
            <summary>
            Login against the provider
            </summary>
            <param name="userName">username</param>
            <param name="password">password</param>
            <returns>Id of the user if successfull, otherwise null</returns>
        </member>
        <member name="M:Komon.Contract.Users.IUserProvider.Authenticate(System.Guid)">
            <summary>
            Authentiacte against the provider just one of the arguments need to match
            </summary>
            <param name="userId">Uniqe user id</param>
            <returns>Id of the user if successfull, otherwise null</returns>
        </member>
        <member name="M:Komon.Contract.Users.IUserProvider.HandleError(System.String)">
            <summary>
            If an error occurs when we try to add the users the complete list of users from the provider is ignored we just continues but this method is called. 
            </summary>
            <param name="message">An error message</param>
        </member>
        <member name="T:Komon.Contract.KomonSystem">
            <summary>
            Type that defines a Komon System.
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonSystem.Id">
            <summary>
            Uniqe id for the system
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonSystem.Name">
            <summary>
            Name for the system
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonSystem.DefaultCulture">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.KomonSystem.ToString">
            <summary>
            The instance as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.KomonSystem.Unknown">
            <summary>
            Create a default instance of Komon System
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.IUserManagementService">
            <summary>
            Interface exposing functionallity for usermanagement
            </summary>
        </member>
        <member name="M:Komon.Contract.IUserManagementService.LogOn(System.String,System.String)">
            <summary>
            Login against a komon system
            </summary>
            <param name="userName">username</param>
            <param name="password">password</param>
            <returns>If the login is successfull a KomonUser object, otherwise null</returns>
        </member>
        <member name="M:Komon.Contract.IUserManagementService.SignOut">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.IUserManagementService.Authenticate(System.Guid)">
            <summary>
            Authentiacte against a komon system
            </summary>
            <param name="userId">Uniqe user id</param>
            <returns>A KomonUser if it exists, otherwise null</returns>
        </member>
        <member name="M:Komon.Contract.IUserManagementService.GetUsers">
            <summary>
            Get all users all Komon Users, the list is filtered based on what access the calling user has.
            </summary>
            <returns>A list of users</returns>
        </member>
        <member name="M:Komon.Contract.IUserManagementService.GetUserSettings">
            <summary>
            Get the current Users, the list is filtered based on what access the calling user has.
            </summary>
            <returns>The current user</returns>
        </member>
        <member name="M:Komon.Contract.IUserManagementService.UpdateUserSettings(Komon.Contract.UserSettings)">
            <summary>
            Update User info, only updates email
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Komon.Contract.IUserManagementService.ChangePassword(System.String,System.String)">
            <summary>
            Sets the password for the current user
            </summary>
            <param name="oldPassword"></param>
            <param name="newPassword"></param>
        </member>
        <member name="M:Komon.Contract.IUserManagementService.GetUserIdClientNames">
            <summary>
            Get user id, client name dictionary from the audit table for complete user id history
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.NotifyBase">
            <summary>
            Base class that implements INotifyPropertyChanged
            </summary>
        </member>
        <member name="E:Komon.Contract.NotifyBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Komon.Contract.NotifyBase.FirePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Raise a PropertyChanged Event for the specified property
            </summary>
            <typeparam name="T">Type of the property</typeparam>
            <param name="expression">An expression of the form () => this.TheProperty</param>
        </member>
        <member name="M:Komon.Contract.NotifyBase.FirePropertyChanged(System.String)">
            <summary>
            Raise a PropertyChanged Event for the specified property
            </summary>
            <param name="name">Name of the changed property</param>
        </member>
        <member name="P:Komon.Contract.NotifyBase.ExecuteOnDispatcher">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.NotifyBase.HandlePropertyChangedAsync``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Func{``0,System.Threading.Tasks.Task},System.Action{System.Exception},System.Action)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <param name="handler"></param>
            <param name="onError"></param>
            <param name="onDone"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.NotifyBase.HandlePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Func{``0,System.Threading.Tasks.Task},System.Action{System.Exception},System.Action)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <param name="handler"></param>
            <param name="onError"></param>
            <param name="onDone"></param>
        </member>
        <member name="T:Komon.Contract.KomonAction">
            <summary>
            Type that defines an action, actions is used by the system to verify that a user has access to code. 
            </summary>
            <remarks>
            Actions is added in the code at designtime at places where authorization is needed, it's evaluated during runtime.
            </remarks>
        </member>
        <member name="P:Komon.Contract.KomonAction.Id">
            <summary>
            Uniqe id for the action
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonAction.Name">
            <summary>
            Name of the action
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonAction.ModuleName">
            <summary>
            The module that defines the action
            </summary>
        </member>
        <member name="M:Komon.Contract.KomonAction.Equals(System.Object)">
            <summary>
            True if both name and module are equal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.KomonAction.GetHashCode">
            <summary>
            Get a uniqe int for the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.KomonAction.Create(System.String,System.String)">
            <summary>
            Create a new instance of a Komon Action
            </summary>
            <param name="module">Name of the module that defines the action</param>
            <param name="action">Name of the action</param>
            <returns>An instance of the action</returns>
        </member>
        <member name="M:Komon.Contract.KomonAction.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.SystemUser">
            <summary>
            Information about a user of a system
            </summary>
        </member>
        <member name="P:Komon.Contract.SystemUser.System">
            <summary>
            The system
            </summary>
        </member>
        <member name="P:Komon.Contract.SystemUser.Actions">
            <summary>
            Actions the user has access to
            </summary>
        </member>
        <member name="P:Komon.Contract.SystemUser.RoleSummary">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Contract.KomonUser">
            <summary>
            Defines a Komon User
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonUser.Id">
            <summary>
            A uniqe id for the user
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonUser.ClientName">
            <summary>
            A uniqe Username for the user
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonUser.FirstName">
            <summary>
            The users firstname
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonUser.LastName">
            <summary>
            The users lastname
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonUser.Type">
            <summary>
            Type of user
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonUser.Email">
            <summary>
            The users email address, must be uniqe
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonUser.Company">
            <summary>
            Company of the user
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonUser.CultureName">
            <summary>
            The culture the user should have in UI:s
            </summary>
        </member>
        <member name="P:Komon.Contract.KomonUser.Systems">
            <summary>
            List of systems the user has access to
            </summary>
        </member>
        <member name="M:Komon.Contract.KomonUser.ToString">
            <summary>
            Pretty print
            </summary>
            <returns></returns>
        </member>
        <member name="M:Komon.Contract.KomonUser.Anonymous">
            <summary>
            Create a anonymous user
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Contract.UserType">
            <summary>
            Defines different usertypes.
            </summary>
        </member>
        <member name="F:Komon.Contract.UserType.User">
            <summary>
            End user of the system, his access rights comes from roles and custom actions
            </summary>
        </member>
        <member name="F:Komon.Contract.UserType.ServiceUser">
            <summary>
            User that has no access to UI but has access to all actions and systems
            </summary>
        </member>
        <member name="F:Komon.Contract.UserType.SuperUser">
            <summary>
            User that has access to the complete system, all UI, actions and systems
            </summary>
        </member>
        <member name="F:Komon.Contract.UserType.Impersonate">
            <summary>
            A user that just defines which authorizatuion a system has
            </summary>
        </member>
        <member name="F:Komon.Contract.UserType.Impersonated">
            <summary>
            A user that gets his info about system and roles from a impersonater
            </summary>
        </member>
        <member name="T:Komon.Contract.UserManagement.IUserManagementClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.UserManagement.IUserManagementClient.LogOn(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.UserManagement.IUserManagementClient.SignOut">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.UserManagement.IUserManagementClient.Authenticate(System.Guid,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.UserManagement.IUserManagementClient.GetUsers(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.UserManagement.IUserManagementClient.GetUserSettings(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.UserManagement.IUserManagementClient.UpdateUserSettings(Komon.Contract.UserSettings,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.UserManagement.IUserManagementClient.ChangePassword(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Contract.UserManagement.IUserManagementClient.GetUserIdClientNames(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.DataAnnotations.RequiredAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.DataAnnotations.ValidationContext">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.DataAnnotations.ValidationResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.DataAnnotations.ValidationResult.ErrorMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.DataAnnotations.ValidationResult.MemberNames">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.DataAnnotations.ValidationResult.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="properties"></param>
        </member>
        <member name="T:Komon.DataAnnotations.Validator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.DataAnnotations.Validator.TryValidateObject(System.Object,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="d"></param>
            <param name="gh"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.Logic.Workflows.WorkflowConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Logic.Workflows.WorkflowConfiguration.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Logic.Workflows.WorkflowConfiguration.InstanceId">
            
        </member>
        <member name="P:Komon.Logic.Workflows.WorkflowConfiguration.IsActive">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Logic.Workflows.WorkflowConfiguration.IsDaily">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Logic.Workflows.WorkflowConfiguration.PersistState">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Logic.Workflows.WorkflowConfiguration.IsCustomExecution">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Logic.Workflows.WorkflowConfiguration.IsRunningInAppDomain">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Logic.Workflows.WorkflowConfiguration.ExecutionDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Logic.Workflows.WorkflowConfiguration.Interval">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Logic.Workflows.WorkflowConfiguration.StartTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Logic.Workflows.WorkflowConfiguration.LogFilePath">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Logic.Workflows.WorkflowConfiguration.RouteLogMessages">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Logic.Workflows.WorkflowConfiguration.User">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Logic.Workflows.WorkflowConfiguration.System">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Logic.Workflows.WorkflowConfiguration.Steps">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Logic.Workflows.WorkflowConfiguration.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Logic.Workflows.WorkItem">
            <summary>
            Specifies a workflow item
            </summary>
        </member>
        <member name="P:Komon.Logic.Workflows.WorkItem.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Logic.Workflows.WorkItem.UnitOfWork">
            <summary>
            The actual code that runs for this item
            </summary>
        </member>
        <member name="P:Komon.Logic.Workflows.WorkItem.Name">
            <summary>
            Name of the item
            </summary>
        </member>
        <member name="T:Komon.Framework.Cache.KomonSimpleCache">
            <summary>
            Provides a simple in memory cache
            </summary>
        </member>
        <member name="M:Komon.Framework.Cache.KomonSimpleCache.Register``1(System.String,System.TimeSpan,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="time"></param>
            <param name="refresh"></param>
        </member>
        <member name="M:Komon.Framework.Cache.KomonSimpleCache.RegisterAndGetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="refresh"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Framework.Cache.KomonSimpleCache.RegisterAndGetAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan},System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="refresh"></param>
            <param name="time"></param>
            <param name="useOldWhileRefreshing"></param>
            <param name="useOldWhenError"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Framework.Cache.KomonSimpleCache.RegisterAndGetAsync``1(System.Linq.Expressions.Expression{System.Func{System.Threading.Tasks.Task{``0}}},System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <param name="refresh"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Framework.Cache.KomonSimpleCache.RegisterAndGetAsync``1(System.Linq.Expressions.Expression{System.Func{System.Threading.Tasks.Task{``0}}},System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan},System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <param name="refresh"></param>
            <param name="time"></param>
            <param name="useOldWhileRefreshing"></param>
            <param name="useOldWhenError"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Framework.Cache.KomonSimpleCache.GetAsync``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Framework.Cache.KomonSimpleCache.GetAsync``1(System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="useOldWhileRefreshing"></param>
            <param name="useOldWhenError"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Framework.Cache.KomonSimpleCache.IsRegistered(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Framework.Cache.KomonSimpleCache.Refresh``1(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            
        </member>
        <member name="M:Komon.Framework.Cache.KomonSimpleCache.Refresh``1(System.Linq.Expressions.Expression{System.Func{System.Threading.Tasks.Task{``0}}})">
            <summary>
            
            </summary>
            <param name="expression"></param>
            
        </member>
        <member name="T:Komon.Framework.Composition">
            <summary>
            A wrapper around MEF
            </summary>
        </member>
        <member name="M:Komon.Framework.Composition.Load``1">
            <summary>
            Load all exported objects of the specified type from the applications installation foleder
            </summary>
            <typeparam name="T">Type of the object to load, should be List of T</typeparam>
            <returns></returns>
        </member>
        <member name="M:Komon.Framework.Composition.LoadTypes``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Komon.Framework.KomonExportAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Framework.KomonExportAttribute.Type">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Framework.KomonExportAttribute.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Komon.Framework.KomonExportAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Framework.Concurrent">
            <summary>
            Wrapper for varius concurrent methods
            </summary>
        </member>
        <member name="M:Komon.Framework.Concurrent.Execute(System.Action)">
            <summary>
            Execute a unit of work in a new task
            </summary>
            <param name="unitOfWork">Code to execute in a new task</param>
            <returns>A task that returns a tuple where item1 is a bool that tells if it executed successfully and item2 holds an exception message if it failed</returns>
        </member>
        <member name="M:Komon.Framework.Concurrent.Execute(System.Action,System.Action{System.Exception})">
            <summary>
            Execute a unit of work in a new task and handle any errors
            </summary>
            <param name="unitOfWork">Unit of work</param>
            <param name="onError">Error handling code</param>
        </member>
        <member name="M:Komon.Framework.Concurrent.OnDone(System.Action,System.Threading.Tasks.Task[])">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="args"></param>
        </member>
        <member name="M:Komon.Framework.Concurrent.Execute(System.Action,System.Action{System.Exception},System.Action,System.Action)">
            <summary>
            Execute a unit of work in a new task and handle any errors
            </summary>
            <param name="unitOfWork">Unit of work</param>
            <param name="onError">Error handling code</param>
            <param name="onSuccess"></param>
            <param name="onDone"></param>
        </member>
        <member name="M:Komon.Framework.Concurrent.ExecuteSafe(System.Action)">
            <summary>
            Execute some code in a new task, It tries two times if the first failed
            </summary>
            <param name="unitOfWork">Code to execute</param>
            <returns>A task that holds a bool, true if the code was executed successfully</returns>
        </member>
        <member name="T:Komon.Framework.FrameworkConfiguration">
            <summary>
            Configuration for the komon framework
            </summary>
        </member>
        <member name="T:Komon.Framework.FrameworkConfiguration.DebugElement">
            <summary>
            Configuration for a debug listener
            </summary>
        </member>
        <member name="P:Komon.Framework.FrameworkConfiguration.DebugElement.Name">
            <summary>
            Name of the listener, same as the name it returns in the IPersistDebug.Name property
            </summary>
        </member>
        <member name="P:Komon.Framework.FrameworkConfiguration.DebugElement.Severity">
            <summary>
            The lowest severity that should be persisted
            </summary>
        </member>
        <member name="P:Komon.Framework.FrameworkConfiguration.DebugElement.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Framework.FrameworkConfiguration.DebugListeners">
            <summary>
            A Collection of configured DebugListeners
            </summary>
        </member>
        <member name="T:Komon.Framework.DebugEvent">
            <summary>
            Information for a log message
            </summary>
        </member>
        <member name="P:Komon.Framework.DebugEvent.Timestamp">
            <summary>
            Timestamp for when the event did occure
            </summary>
        </member>
        <member name="P:Komon.Framework.DebugEvent.Process">
            <summary>
            Name of the process
            </summary>
        </member>
        <member name="P:Komon.Framework.DebugEvent.AppDomain">
            <summary>
            Name of the app domain
            </summary>
        </member>
        <member name="P:Komon.Framework.DebugEvent.Thread">
            <summary>
            number of the clr thread
            </summary>
        </member>
        <member name="P:Komon.Framework.DebugEvent.Block">
            <summary>
            Name of the method that the event occured in
            </summary>
        </member>
        <member name="P:Komon.Framework.DebugEvent.Severity">
            <summary>
            Severity of the log message
            </summary>
        </member>
        <member name="P:Komon.Framework.DebugEvent.Message">
            <summary>
            friendly message for the event
            </summary>
        </member>
        <member name="M:Komon.Framework.DebugEvent.ToString">
            <summary>
            Format the event as a string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Framework.LogEvent">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Framework.IPersistDebug">
            <summary>
            Defines a debug listener 
            </summary>
        </member>
        <member name="P:Komon.Framework.IPersistDebug.Name">
            <summary>
            Name of the Listener
            </summary>
        </member>
        <member name="P:Komon.Framework.IPersistDebug.SeverityFilter">
            <summary>
            Filter the debug messages that comes in
            </summary>
        </member>
        <member name="P:Komon.Framework.IPersistDebug.LogStream">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Framework.IPersistDebug.Initialize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Framework.PersistDebugChannel">
            <summary>
            Writes log to the .NET debug channel
            </summary>
        </member>
        <member name="P:Komon.Framework.PersistDebugChannel.SeverityFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Framework.PersistDebugChannel.Initialize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Komon.Framework.PersistDebugChannel.LogStream">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Framework.PersistDebugChannel.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Framework.Severity">
            <summary>
            Severity of a log message
            </summary>
        </member>
        <member name="F:Komon.Framework.Severity.Verbose">
            <summary>
            Trace information
            </summary>
        </member>
        <member name="F:Komon.Framework.Severity.Information">
            <summary>
            Information message
            </summary>
        </member>
        <member name="F:Komon.Framework.Severity.Warning">
            <summary>
            Warning, this should not happen
            </summary>
        </member>
        <member name="F:Komon.Framework.Severity.Error">
            <summary>
            Error, Something unexpected has happend
            </summary>
        </member>
        <member name="F:Komon.Framework.Severity.Critical">
            <summary>
            Something thats is fatal for the system has happend
            </summary>
        </member>
        <member name="T:Komon.Framework.TrendEvent">
            <summary>
            Information about a trend
            </summary>
        </member>
        <member name="P:Komon.Framework.TrendEvent.Module">
            <summary>
            Name of the trend
            </summary>
        </member>
        <member name="P:Komon.Framework.TrendEvent.Trend">
            <summary>
            Name of the Trend/serie
            </summary>
        </member>
        <member name="P:Komon.Framework.TrendEvent.Timestamp">
            <summary>
            Timestamp for the event
            </summary>
        </member>
        <member name="P:Komon.Framework.TrendEvent.Value">
            <summary>
            Value of the trend
            </summary>
        </member>
        <member name="T:Komon.Framework.TrendUpdateType">
            <summary>
            Specifies how the trend should be updated
            </summary>
        </member>
        <member name="F:Komon.Framework.TrendUpdateType.Add">
            <summary>
            Add the value to whats already saved
            </summary>
        </member>
        <member name="F:Komon.Framework.TrendUpdateType.Mean">
            <summary>
            Calculate the mean value of whats saved and the new value
            </summary>
        </member>
        <member name="F:Komon.Framework.TrendUpdateType.Replace">
            <summary>
            Replace the old value with the new one
            </summary>
        </member>
        <member name="F:Komon.Framework.TrendUpdateType.KeepOld">
            <summary>
            Just keep the first value
            </summary>
        </member>
        <member name="T:Komon.Framework.DisposableEnumerable`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Komon.Framework.DisposableEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.IDisposable[])">
            <summary>
            
            </summary>
            <param name="seq"></param>
            <param name="p"></param>
        </member>
        <member name="M:Komon.Framework.DisposableEnumerable`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Komon.Framework.DisposableEnumerable`1.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Framework.DisposableEnumerable`1.ToDictionary``2(System.Func{`0,``0},System.Func{`0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Framework.DisposableEnumerable`1.ToDictionary``1(System.Func{`0,``0})">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Framework.DisposableEnumerable`1.ToList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Framework.KomonInjector">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Framework.KomonInjector.RegisterSingleton``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TInterface"></typeparam>
            <param name="instance"></param>
        </member>
        <member name="M:Komon.Framework.KomonInjector.RegisterSingleton``1(System.Func{``0})">
            <summary>
            
            </summary>
            <typeparam name="TInterface"></typeparam>
            <param name="instance"></param>
        </member>
        <member name="M:Komon.Framework.KomonInjector.RegisterSingleton``2">
            <summary>
            
            </summary>
            <typeparam name="TInterface"></typeparam>
            <typeparam name="TImplementation"></typeparam>
        </member>
        <member name="M:Komon.Framework.KomonInjector.RegisterType``2">
            <summary>
            
            </summary>
            <typeparam name="TInterface"></typeparam>
            <typeparam name="TImplementation"></typeparam>
        </member>
        <member name="M:Komon.Framework.KomonInjector.GetInstance``1">
            <summary>
            
            </summary>
            <typeparam name="TInterface"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Komon.Framework.Mapper.KomonMapper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Framework.Mapper.KomonMapper.Map``2(``0,``1)">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="M:Komon.Framework.Mapper.KomonMapper.Copy``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.Framework.Mapper.IKomonMapper">
            <summary>
            Wrapper around automapper
            </summary>
        </member>
        <member name="M:Komon.Framework.Mapper.IKomonMapper.Map``2(``0,``1)">
            <summary>
            Map one object to another
            </summary>
            <typeparam name="TSource">Type of the source object</typeparam>
            <typeparam name="TDestination">Type of the destination object</typeparam>
            <param name="source">Source object</param>
            <param name="destination">Destination object</param>
            <returns>The destination object</returns>
        </member>
        <member name="M:Komon.Framework.Mapper.IKomonMapper.Map``2(``0)">
            <summary>
            Map one object to a new instance of another object
            </summary>
            <typeparam name="TSource">Type of the source object</typeparam>
            <typeparam name="TDestination">Type of the destination object</typeparam>
            <param name="source">Source object</param>
            <returns>The new destination object</returns>
        </member>
        <member name="M:Komon.Framework.Mapper.IKomonMapper.Map``1(System.Object)">
            <summary>
            Map a object to a new destination object
            </summary>
            <typeparam name="TDestination">Type of the destination object</typeparam>
            <param name="source">Source object</param>
            <returns>The new destination object</returns>
        </member>
        <member name="M:Komon.Framework.Mapper.IKomonMapper.Initialize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Framework.MessageEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Framework.MessageEventArgs.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Komon.Framework.MessageEventArgs.Message">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Framework.EventArgs`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Komon.Framework.EventArgs`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Komon.Framework.EventArgs`1.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Framework.CsvParser">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Framework.CsvParser.Separator">
            <summary>
            Character that separates the columns
            </summary>
        </member>
        <member name="P:Komon.Framework.CsvParser.FilePath">
            <summary>
            Path to the csv file
            </summary>
        </member>
        <member name="P:Komon.Framework.CsvParser.Data">
            <summary>
            The csv file as a string
            </summary>
        </member>
        <member name="P:Komon.Framework.CsvParser.IsCaseSensitive">
            <summary>
            Is the column names case sensitive
            </summary>
        </member>
        <member name="P:Komon.Framework.CsvParser.Encoding">
            <summary>
            Encoding of the csv file
            </summary>
        </member>
        <member name="P:Komon.Framework.CsvParser.StringSplitOptions">
            <summary>
            Options to use when spliting the fileup
            </summary>
        </member>
        <member name="P:Komon.Framework.CsvParser.HeaderLength">
            <summary>
            Nbrs of rows for a header
            </summary>
        </member>
        <member name="P:Komon.Framework.CsvParser.Header">
            <summary>
            The parsed header
            </summary>
        </member>
        <member name="P:Komon.Framework.CsvParser.CustomHeader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Framework.CsvParser.#ctor">
            <summary>
            Create an instance
            </summary>
        </member>
        <member name="M:Komon.Framework.CsvParser.Execute">
            <summary>
            Execute the parser
            </summary>
            <returns>A sequence of rows</returns>
        </member>
        <member name="M:Komon.Framework.CsvParser.Dispose">
            <summary>
            Dispose the parser
            </summary>
        </member>
        <member name="M:Komon.Framework.CsvParser.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Komon.Framework.CsvLine">
            <summary>
            A row in a csv file
            </summary>
        </member>
        <member name="M:Komon.Framework.CsvLine.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{System.String})">
            <summary>
            Create an instance
            </summary>
            <param name="cols">The values of the columns in the row</param>
            <param name="headers">column names</param>
            <param name="clean"></param>
        </member>
        <member name="M:Komon.Framework.CsvLine.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes
            derived from the System.Dynamic.DynamicObject class can override this method
            to specify dynamic behavior for operations such as getting a value for a
            property.
            </summary>
            <param name="binder">
            Provides information about the object that called the dynamic operation.
            The binder.Name property provides the name of the member on which the dynamic
            operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty)
            statement, where sampleObject is an instance of the class derived from the
            System.Dynamic.DynamicObject class, binder.Name returns "SampleProperty".
            The binder.IgnoreCase property specifies whether the member name is case-sensitive.
            </param>
            <param name="result">
            The result of the get operation. For example, if the method is called for
            a property, you can assign the property value to result.
            </param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns
            false, the run-time binder of the language determines the behavior. (In most
            cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="T:Komon.Framework.Debug">
            <summary>
            Komon class for logging
            </summary>
        </member>
        <member name="M:Komon.Framework.Debug.ClearDebugListeners">
            <summary>
            CLear all current Listeners
            </summary>
        </member>
        <member name="M:Komon.Framework.Debug.AddListener(Komon.Framework.IPersistDebug)">
            <summary>
            Add Listener
            </summary>
            <param name="listener">Listener to add</param>
        </member>
        <member name="M:Komon.Framework.Debug.RemoveListener(Komon.Framework.IPersistDebug)">
            <summary>
            Add Listener
            </summary>
            <param name="listener">Listener to add</param>
        </member>
        <member name="M:Komon.Framework.Debug.StartStopwatch(System.String)">
            <summary>
            Start a new stopwatch it will end when dispose is called and print the time to the log
            </summary>
            <param name="message">Message to display with start and stop</param>
            <returns>A KomonStopwatch object</returns>
        </member>
        <member name="M:Komon.Framework.Debug.Log(System.String,Komon.Framework.Severity)">
            <summary>
            Log a message, it will be written to all hooked up listeners
            </summary>
            <param name="message">The message to write</param>
            <param name="severity">Severity of the message</param>
        </member>
        <member name="M:Komon.Framework.Debug.Log(System.String,System.Object[])">
            <summary>
            Log a message, it will be written to all hooked up listeners
            </summary>
            <param name="message">The message to write</param>
            <param name="args">Formt arguments</param>
        </member>
        <member name="M:Komon.Framework.Debug.LogTrend(System.String,System.String,System.String,System.DateTime,System.Int32,Komon.Framework.TrendUpdateType)">
            <summary>
            Log a trend event
            </summary>
            <param name="system">Name of the system</param>
            <param name="trend">Name of the trend</param>
            <param name="series">Name of the serie</param>
            <param name="timestamp">Timestamp of the event</param>
            <param name="value">value of the event</param>
            <param name="type">Type of trend</param>
        </member>
        <member name="M:Komon.Framework.Debug.LogTrend(Komon.Framework.TrendEvent)">
            <summary>
            Log a trend event
            </summary>
            <param name="data">The event to log</param>
        </member>
        <member name="M:Komon.Framework.Debug.LogException(System.Exception,Komon.Framework.Severity)">
            <summary>
            Log an exception
            </summary>
            <param name="ex">The exception to log</param>
            <param name="severity">Default is error</param>
        </member>
        <member name="M:Komon.Framework.Debug.LogException(System.String,System.Exception,Komon.Framework.Severity)">
            <summary>
            Log an exception
            </summary>
            <param name="message">Message about the exception context</param>
            <param name="ex">The exception to log</param>
            <param name="severity">Default is error</param>
        </member>
        <member name="T:Komon.Framework.Parser">
            <summary>
            Creates Different Parsers
            </summary>
        </member>
        <member name="M:Komon.Framework.Parser.CreateCsv">
            <summary>
            Create a new CSV parser
            </summary>
            <returns>The new CSV Parser</returns>
        </member>
        <member name="T:Komon.Framework.PlatformServices.IDebugInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Framework.PlatformServices.IDebugInfo.ProcessName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Framework.PlatformServices.IDebugInfo.AppDomain">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Framework.PlatformServices.IDebugInfo.Block">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Framework.PlatformServices.IDebugInfo.Thread">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Framework.IPlatformService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Framework.IPlatformService.GetAssembliesInInstalledFolder">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Komon.Framework.IPlatformService.GetKomonConfig">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Komon.Framework.IPlatformService.Rx">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Komon.Framework.IPlatformService.DebugInfo">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Komon.Framework.IPlatformService.GetProperties(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Framework.IPlatformService.ThreadSleep(System.Int32)">
            <summary>
            Will not work on all platforms
            </summary>
            <param name="milliseconds"></param>
        </member>
        <member name="M:Komon.Framework.IPlatformService.CopyToClipboard(System.String)">
            <summary>
            Will not work on all platforms
            </summary>
            <param name="milliseconds"></param>
        </member>
        <member name="M:Komon.Framework.IPlatformService.OpenFile(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.Framework.IXElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Framework.IXElement.Descendants(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Framework.IXElement.Attribute(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.Framework.IXAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Framework.IXAttribute.ToString(System.String)">
            <summary>
            
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Framework.IXAttribute.ToEnum``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Framework.IXAttribute.ToBool(System.Boolean)">
            <summary>
            
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Framework.IXAttribute.ToGuid(System.Guid)">
            <summary>
            
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Framework.IXAttribute.ToInt32(System.Int32)">
            <summary>
            
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.Framework.Properties">
            <summary>
            Defines constants for the assembly info
            </summary>
        </member>
        <member name="F:Komon.Framework.Properties.SystemCompany">
            <summary>
            AssemblyCompany
            </summary>
        </member>
        <member name="F:Komon.Framework.Properties.SystemCopyright">
            <summary>
            AssemblyCopyright
            </summary>
        </member>
        <member name="F:Komon.Framework.Properties.SystemVersion">
            <summary>
            Assembly and file version
            </summary>
        </member>
        <member name="T:Komon.Framework.KomonStopwatch">
            <summary>
            Stopwatch that writes time to the debug listener
            </summary>
        </member>
        <member name="M:Komon.Framework.KomonStopwatch.#ctor(System.String,System.Boolean)">
            <summary>
            Create an instance, this starts the stopwatch. Implemented to be used with the c# using keyword
            </summary>
            <param name="name">Name, will be used in the log</param>
            <param name="memory">If true Log information about memory usage</param>
        </member>
        <member name="M:Komon.Framework.KomonStopwatch.Dispose">
            <summary>
            Dispose the stopwatch, will stop the timer and print to the debug
            </summary>
        </member>
        <member name="T:Komon.Framework.ISerialize">
            <summary>
            Defines methods to serialize .NET objects
            </summary>
        </member>
        <member name="M:Komon.Framework.ISerialize.FromDataContract``1(System.String)">
            <summary>
            Create an object from a string, The object must have the DataContract and DataMember attributes
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="data">A string containing xml for the object</param>
            <returns>the materialized object</returns>
        </member>
        <member name="M:Komon.Framework.ISerialize.ToDataContract``1(``0)">
            <summary>
            Serialize an object to xml, The object must have the DataContract and DataMember attributes
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="obj">The object</param>
            <returns>A string containing xml for the object</returns>
        </member>
        <member name="M:Komon.Framework.ISerialize.FromJson``1(System.String)">
            <summary>
            Create an object from a string, The object must have the DataContract and DataMember attributes
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="data">A string containing xml for the object</param>
            <returns>the materialized object</returns>
        </member>
        <member name="M:Komon.Framework.ISerialize.ToJson``1(``0)">
            <summary>
            Serialize an object to xml, The object must have the DataContract and DataMember attributes
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="obj">The object</param>
            <returns>A string containing xml for the object</returns>
        </member>
        <member name="M:Komon.Framework.ISerialize.FromJsonBin``1(System.Byte[])">
            <summary>
            Create an object from a string, The object must have the DataContract and DataMember attributes
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="data">A string containing xml for the object</param>
            <returns>the materialized object</returns>
        </member>
        <member name="M:Komon.Framework.ISerialize.ToJsonBin``1(``0)">
            <summary>
            Serialize an object to xml, The object must have the DataContract and DataMember attributes
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="obj">The object</param>
            <returns>A string containing xml for the object</returns>
        </member>
        <member name="T:Komon.KomonArgumentException">
            <summary>
            Exception class for Komon, used for KomonExceptions
            </summary>
        </member>
        <member name="M:Komon.KomonArgumentException.#ctor(System.String,System.Object[])">
            <summary>
            Create an instance
            </summary>
            <param name="message">Error Message</param>
            <param name="args">An object array that contains zero or more objects to format</param>
        </member>
        <member name="M:Komon.KomonArgumentException.#ctor(System.String)">
            <summary>
            Create an instance
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Komon.KomonArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Create an instance
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:Komon.KomonError">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.KomonError.Message">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.RxProvider.IRxProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.RxProvider.IRxProvider.CreateSubject``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Komon.RxProvider.IRxProvider.Where``1(Komon.RxProvider.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obs"></param>
            <param name="pred"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.RxProvider.IRxProvider.Select``2(Komon.RxProvider.IObservable{``0},System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TR"></typeparam>
            <param name="obs"></param>
            <param name="pred"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.RxProvider.IRxProvider.Buffer``1(Komon.RxProvider.IObservable{``0},System.TimeSpan)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obs"></param>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.RxProvider.IRxProvider.Cast``1(Komon.RxProvider.IObservable{System.Object})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obs"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.RxProvider.IRxProvider.Subscribe``1(Komon.RxProvider.IObservable{``0},System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="onNext"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.RxProvider.IRxProvider.DistinctUntilChanged``1(Komon.RxProvider.IObservable{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obs"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.RxProvider.ISubject`2">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Komon.RxProvider.ISubject`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Komon.RxProvider.IObserver`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Komon.RxProvider.IObserver`1.OnCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.RxProvider.IObserver`1.OnError(System.Exception)">
            <summary>
            
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Komon.RxProvider.IObserver`1.OnNext(`0)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Komon.RxProvider.IObservable`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Komon.RxProvider.IObservable`1.Subscribe(Komon.RxProvider.IObserver{`0})">
            <summary>
            
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.RxProvider.RxProviderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.RxProvider.RxProviderExtensions.Where``1(Komon.RxProvider.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obs"></param>
            <param name="pred"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.RxProvider.RxProviderExtensions.Cast``1(Komon.RxProvider.IObservable{System.Object})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obs"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.RxProvider.RxProviderExtensions.Subscribe``1(Komon.RxProvider.IObservable{``0},System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="onNext"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.RxProvider.RxProviderExtensions.Buffer``1(Komon.RxProvider.IObservable{``0},System.TimeSpan)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obs"></param>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.RxProvider.RxProviderExtensions.Select``2(Komon.RxProvider.IObservable{``0},System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TR"></typeparam>
            <param name="obs"></param>
            <param name="pred"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.RxProvider.RxProviderExtensions.DistinctUntilChanged``1(Komon.RxProvider.IObservable{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obs"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.KomonFramework">
            <summary>
            Expose different Common helper methods and wrappers.
            </summary>
        </member>
        <member name="P:Komon.KomonFramework.Debug">
            <summary>
            Functions for Logging of the system
            </summary>
        </member>
        <member name="P:Komon.KomonFramework.Concurrent">
            <summary>
            Functions that makes it easier to write concurrent and async code
            </summary>
        </member>
        <member name="P:Komon.KomonFramework.Composition">
            <summary>
            Wrapper arounde MEF that makes it easier to find plugins
            </summary>
        </member>
        <member name="P:Komon.KomonFramework.Parser">
            <summary>
            Different parsers that can be needed
            </summary>
        </member>
        <member name="P:Komon.KomonFramework.Mapper">
            <summary>
            Wrapper around automapper, used to map object
            </summary>
        </member>
        <member name="P:Komon.KomonFramework.Serialize">
            <summary>
            Wrapper around the different serialize methods in .net
            </summary>
        </member>
        <member name="P:Komon.KomonFramework.Cache">
            <summary>
            A simple cache
            </summary>
        </member>
        <member name="P:Komon.KomonFramework.PlatformService">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Provider.Configuration.ProviderConfiguration">
            <summary>
            A configuration section for komons provider interface
            </summary>
        </member>
        <member name="T:Komon.Provider.Configuration.ProviderConfiguration.MailElement">
            <summary>
            Configuration for Komon Mail Provider
            </summary>
        </member>
        <member name="P:Komon.Provider.Configuration.ProviderConfiguration.MailElement.SmtpServer">
            <summary>
            Address for the smtp server to send mail from
            </summary>
        </member>
        <member name="P:Komon.Provider.Configuration.ProviderConfiguration.MailElement.Username">
            <summary>
            Optional username for the SMTP server
            </summary>
        </member>
        <member name="P:Komon.Provider.Configuration.ProviderConfiguration.MailElement.Password">
            <summary>
            Optional password for the SMTP server
            </summary>
        </member>
        <member name="P:Komon.Provider.Configuration.ProviderConfiguration.MailElement.Port">
            <summary>
            Port to use on the smtp server
            </summary>
        </member>
        <member name="P:Komon.Provider.Configuration.ProviderConfiguration.MailElement.From">
            <summary>
            Address to send from
            </summary>
        </member>
        <member name="P:Komon.Provider.Configuration.ProviderConfiguration.MailElement.DisplayFrom">
            <summary>
            Display name for the send address
            </summary>
        </member>
        <member name="P:Komon.Provider.Configuration.ProviderConfiguration.MailElement.Mock">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Provider.Configuration.ProviderConfiguration.JSONSerializer">
            <summary>
            Configuration for which Serialization framework to use. Default DataContractJSONSerializer or optionally JSON.Net
            </summary>
        </member>
        <member name="P:Komon.Provider.Configuration.ProviderConfiguration.Mail">
            <summary>
            Configuration for the komon mail provider
            </summary>
        </member>
        <member name="T:Komon.Provider.Configuration.ProviderConfiguration.SmsElement">
            <summary>
            Configuration for Komon Sms Provider
            </summary>
        </member>
        <member name="P:Komon.Provider.Configuration.ProviderConfiguration.SmsElement.ProviderName">
            <summary>
            Name of the sms provider to use
            </summary>
        </member>
        <member name="P:Komon.Provider.Configuration.ProviderConfiguration.Sms">
            <summary>
            Configuration for the komon sms provider
            </summary>
        </member>
        <member name="T:Komon.Provider.Crypt.ICrypt">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Provider.Crypt.ICrypt.Hash(System.String)">
            <summary>
            
            </summary>
            <param name="plain"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Provider.Crypt.ICrypt.Verify(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="hashed"></param>
            <param name="plain"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Provider.Crypt.ICrypt.RandomString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Komon.Provider.Ftp.IFtp">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Provider.Ftp.IFtp.DownloadFile(System.Uri,System.String,System.String,System.String)">
            <summary>
            Download a file from an ftp
            </summary>
            <param name="serverUri">URI on the ftp server</param>
            <param name="filePath">Path where to save the file </param>
            <param name="userName">ftp user name</param>
            <param name="password">ftp password</param>
        </member>
        <member name="M:Komon.Provider.Ftp.IFtp.DownloadFile(System.Uri,System.String,System.String)">
            <summary>
            Download a file from an ftp
            </summary>
            <param name="serverUri">URI on the ftp server</param>
            <param name="userName">ftp user name</param>
            <param name="password">ftp password</param>
            <returns>The file as a byte array</returns>
        </member>
        <member name="M:Komon.Provider.Ftp.IFtp.DeleteFile(System.Uri,System.String,System.String)">
            <summary>
            Deletes a file on a FTP
            </summary>
            <param name="serverUri">URI for the file to delete</param>
            <param name="userName">Username</param>
            <param name="password">Password</param>
            <returns>True if deletion is successful</returns>
        </member>
        <member name="M:Komon.Provider.Ftp.IFtp.FileExists(System.Uri,System.String,System.String)">
            <summary>
            Check if a file exists on an FTP
            </summary>
            <param name="serverUri">URI to the file</param>
            <param name="userName">Username</param>
            <param name="password">Password</param>
            <returns>True if the file exists</returns>
        </member>
        <member name="M:Komon.Provider.Ftp.IFtp.ListFtpDirectory(System.String,System.String,System.String)">
            <summary>
            List the files on a ftp directory
            </summary>
            <param name="ftpSourcePath">URI to the folder on the ftp site</param>
            <param name="user">Username</param>
            <param name="password">Password</param>
            <returns>List of filenames</returns>
        </member>
        <member name="M:Komon.Provider.Ftp.IFtp.UploadFile(System.Uri,System.Byte[],System.String,System.String)">
            <summary>
            Upload a file to an ftp server
            </summary>
            <param name="serverUri">URI to the FTP where to upload</param>
            <param name="data">The file as a byte array</param>
            <param name="userName">ftp user name</param>
            <param name="password">ftp password</param>
        </member>
        <member name="M:Komon.Provider.Ftp.IFtp.UploadFile(System.Uri,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="serverUri">URI to the FTP where to upload</param>
            <param name="filePath">Path to a local file</param>
            <param name="userName">ftp user name</param>
            <param name="password">ftp password</param>
        </member>
        <member name="M:Komon.Provider.Ftp.IFtp.RenameFtpFile(System.Uri,System.String,System.String,System.String)">
            <summary>
            Rename file on remote FTP server
            </summary>
            <param name="ftpSourcePath">URI to the folder on the ftp site</param>
            <param name="ftpTargetPath">New target path e.g. /Processed/[FileName], tries to create directory if it does not exists</param>
            <param name="userName">ftp user name</param>
            <param name="password">ftp password</param>
        </member>
        <member name="M:Komon.Provider.Ftp.IFtp.CreateFtpFolder(System.Uri,System.String,System.String)">
            <summary>
            Tries to create an ftp folder and returns false if the directory already exists
            </summary>
            <param name="ftpDirectoryPath">URI for the folder to create</param>
            <param name="userName">ftp user name</param>
            <param name="password">ftp password</param>
            <returns>False if the directory already exists or if other error occured</returns>
        </member>
        <member name="T:Komon.Provider.KomonProvider">
            <summary>
            Wrappers for common task thats needed in the Logic layer
            </summary>
        </member>
        <member name="P:Komon.Provider.KomonProvider.Ftp">
            <summary>
            Exposes Ftp Functions
            </summary>
        </member>
        <member name="P:Komon.Provider.KomonProvider.Mail">
            <summary>
            Exposes functions for Email
            </summary>
        </member>
        <member name="T:Komon.Provider.KomonProvider.MockedMail">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Provider.KomonProvider.MockedMail.SendMail(System.String,System.String,System.String,System.String,System.String,System.Boolean,Komon.Provider.Mail.MailPriority)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="subject"></param>
            <param name="message"></param>
            <param name="fromAddress"></param>
            <param name="displayFrom"></param>
            <param name="isHtml"></param>
            <param name="priority"></param>
        </member>
        <member name="P:Komon.Provider.KomonProvider.Script">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Provider.KomonProvider.Crypt">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Provider.KomonProvider.Sms">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Provider.KomonProvider.Mapper">
            <summary>
            
            </summary>
        </member>
        <member name="T:Komon.Provider.Mail.IEmail">
            <summary>
            Komon Mail functions
            </summary>
        </member>
        <member name="M:Komon.Provider.Mail.IEmail.SendMail(System.String,System.String,System.String,System.String,System.String,System.Boolean,Komon.Provider.Mail.MailPriority)">
            <summary>
            Send a mail
            </summary>
            <param name="address">Email address of the reciver</param>
            <param name="subject">Subject</param>
            <param name="message">Message</param>
            <param name="fromAddress">The address that should be used as from address</param>
            <param name="displayFrom">Display name for the from address</param>
            <param name="isHtml">Is the message html encoded</param>
            <param name="priority">Mail priority</param>
        </member>
        <member name="T:Komon.Provider.Mail.MailPriority">
            <summary>
             Specifies the priority of a System.Net.Mail.MailMessage.
            </summary>
        </member>
        <member name="F:Komon.Provider.Mail.MailPriority.Normal">
            <summary>
            The email has normal priority.
            </summary>
        </member>
        <member name="F:Komon.Provider.Mail.MailPriority.Low">
            <summary>
            The email has low priority.
            </summary>
        </member>
        <member name="F:Komon.Provider.Mail.MailPriority.High">
            <summary>
             The email has high priority.
            </summary>
        </member>
        <member name="T:Komon.Provider.Script.IScriptEngine">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Provider.Script.IScriptEngine.Execute(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="language"></param>
            <param name="script"></param>
            <param name="variables"></param>
            <returns></returns>
        </member>
        <member name="M:Komon.Provider.Script.IScriptEngine.Execute``1(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="language"></param>
            <param name="script"></param>
            <param name="variables"></param>
            <returns></returns>
        </member>
        <member name="T:Komon.Provider.ISms">
            <summary>
            
            </summary>
        </member>
        <member name="P:Komon.Provider.ISms.ProviderName">
            <summary>
            
            </summary>
        </member>
        <member name="M:Komon.Provider.ISms.Send(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="number"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:System.Threading.Tasks.NotifyTask`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:System.Threading.Tasks.NotifyTask`1.Task">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.NotifyTask`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            
            </summary>
            <param name="func"></param>
        </member>
        <member name="P:System.Threading.Tasks.NotifyTask`1.Lazy">
            <summary>
            
            </summary>
        </member>
        <member name="E:System.Threading.Tasks.NotifyTask`1.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.NotifyTask`1.FirePropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:System.Threading.Tasks.TaskExtensions">
            <summary>
            Extensions to the .NET Task type
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.IgnoreExceptions(System.Threading.Tasks.Task)">
            <summary>
            Ignore exceptions that may be thrown in the task
            </summary>
            <param name="task">The task</param>
            <returns>A new task</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.ExecuteAsync``1(System.Threading.Tasks.Task{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>
            Execute a task async and handle the respose
            </summary>
            <typeparam name="T">Type that is returned by the task</typeparam>
            <param name="task">The task to execute</param>
            <param name="onSuccess">Code to run if the code runs ok</param>
            <param name="onError">Code to run if the code fails</param>
            <param name="onDone">Code to run after the task is done</param>
            <returns></returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.ExecuteAsync(System.Threading.Tasks.Task,System.Action,System.Action{System.Exception},System.Action)">
            <summary>
            Execute a task async and handle the respose
            </summary>
            <param name="task">The task to execute</param>
            <param name="onSuccess">Code to run if the code runs ok</param>
            <param name="onError">Code to run if the code fails</param>
            <param name="onDone">Code to run after the task is done</param>
            <returns></returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.ToAsync``1(System.Threading.Tasks.Task{``0},System.AsyncCallback,System.Object)">
            <summary> 
            Creates a Task that represents the completion of another Task, and  
            that schedules an AsyncCallback to run upon completion. 
            </summary> 
            <param name="task">The antecedent Task.</param> 
            <param name="callback">The AsyncCallback to run.</param> 
            <param name="state">The object state to use with the AsyncCallback.</param> 
            <returns>The new task.</returns> 
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.SetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task)">
            <summary>Transfers the result of a Task to the TaskCompletionSource.</summary> 
            <typeparam name="TResult">Specifies the type of the result.</typeparam> 
            <param name="resultSetter">The TaskCompletionSource.</param> 
            <param name="task">The task whose completion results should be transfered.</param> 
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.SetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task{``0})">
            <summary>Transfers the result of a Task to the TaskCompletionSource.</summary> 
            <typeparam name="TResult">Specifies the type of the result.</typeparam> 
            <param name="resultSetter">The TaskCompletionSource.</param> 
            <param name="task">The task whose completion results should be transfered.</param> 
        </member>
        <member name="T:System.Reflection.AssemblyExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.GetTypesSafe(System.Reflection.Assembly)">
            <summary>
            
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="T:System.Collections.Generic.DictionaryExtensions">
            <summary>
            Extension methods for the dictionary class
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.ValueOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Try to get the value from the dictionary if it's not there return a default value
            </summary>
            <typeparam name="TKey">Key Type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="dictionary">Dictionary</param>
            <param name="key">Key to use for lookup</param>
            <returns>Value in dictionary or the .NET default value</returns>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.ValueOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Try to get the value from the dictionary if it's not there return a default value
            </summary>
            <typeparam name="TKey">Key Type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="dictionary">Dictionary</param>
            <param name="key">Key to use for lookup</param>
            <param name="defaultValue">User provided default value</param>
            <returns>Value in dictionary or a userprovided default value</returns>
        </member>
        <member name="T:System.Collections.Generic.ListExtension">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListExtension.ForEach``1(System.Collections.Generic.List{``0},System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="action"></param>
        </member>
        <member name="T:System.ExceptionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.GetMessage(System.Exception)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:System.ExceptionExtensions.PrittyPrint(System.Exception)">
            <summary>
            
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:System.RandomExtensions">
            <summary>
            Extension Methods for the .NET Random type
            </summary>
        </member>
        <member name="M:System.RandomExtensions.NextPassword(System.Random,System.Int32)">
            <summary>
            Generate a password
            </summary>
            <param name="ra">An instance of Random </param>
            <param name="length">Length of the password to generate</param>
            <returns>A new random password</returns>
        </member>
        <member name="T:System.IO.StreamReaderExtensions">
            <summary>
            Extension methods for the .NET StreamReader type
            </summary>
        </member>
        <member name="M:System.IO.StreamReaderExtensions.StreamLinesFromFile(System.IO.StreamReader)">
            <summary>
            Stream lines from a text file
            </summary>
            <param name="reader">Instance of a stream reader</param>
            <returns>The lines as a sequence</returns>
        </member>
        <member name="M:System.IO.StreamReaderExtensions.ToByteArray(System.IO.Stream)">
            <summary>
            Convert the stream to a byte array
            </summary>
            <param name="stream">StreamReader instance</param>
            <returns>A byte array from the stream</returns>
        </member>
        <member name="T:System.DateTimeExtensions">
            <summary>
            Extension methods for the .NET DateTime type
            </summary>
        </member>
        <member name="M:System.DateTimeExtensions.GetAge(System.Nullable{System.DateTime})">
            <summary>
            Get the nbr of hole years passed from a date until now
            </summary>
            <param name="date">Birthdate</param>
            <returns>Age, -1 if the date is null</returns>
        </member>
        <member name="M:System.DateTimeExtensions.GetAge(System.String)">
            <summary>
            Get the nbr of hole years passed from a date until now
            </summary>
            <param name="input">A string with the birtdate</param>
            <returns>Age, -1 if the string didn't have the right format</returns>
        </member>
        <member name="M:System.DateTimeExtensions.GetYearsPassed(System.DateTime,System.DateTime)">
            <summary>
            Get the number of hole years passed between two dates
            </summary>
            <param name="start">Start date</param>
            <param name="stop">End date</param>
            <returns>Nbr of years</returns>
        </member>
        <member name="M:System.DateTimeExtensions.GetFirstInYear(System.DateTime)">
            <summary>
            Get first date of the year
            </summary>
            <param name="date">Date to get the first in year for</param>
            <returns>The first date of the year</returns>
        </member>
        <member name="M:System.DateTimeExtensions.GetLastInYear(System.DateTime)">
            <summary>
            Get last date of the year
            </summary>
            <param name="date">Date to get the last in year for</param>
            <returns>The last date of the year, with the time 23.59.59</returns>
        </member>
        <member name="M:System.DateTimeExtensions.GetFirstInMonth(System.DateTime)">
            <summary>
            Get first date of the month
            </summary>
            <param name="date">Date to get the first in month for</param>
            <returns>The first date of th month</returns>
        </member>
        <member name="M:System.DateTimeExtensions.GetFirstInWeek(System.DateTime)">
            <summary>
            Get first date in week
            </summary>
            <param name="date">Date to get the first in week for</param>
            <returns>The first date in the week</returns>
        </member>
        <member name="M:System.DateTimeExtensions.GetLastInWeek(System.DateTime)">
            <summary>
            Get the last date for the current week
            </summary>
            <param name="date">Date to get the last in week for</param>
            <returns>Last date of the week</returns>
        </member>
        <member name="M:System.DateTimeExtensions.GetLastInMonth(System.DateTime)">
            <summary>
            Get the last date of the month
            </summary>
            <param name="date">Date</param>
            <returns>The last date of the month</returns>
        </member>
        <member name="M:System.DateTimeExtensions.GetStartOfDay(System.DateTime)">
            <summary>
            Get the start of a day from a date
            </summary>
            <param name="date">Date</param>
            <returns>Start of the day, 00:00:00</returns>
        </member>
        <member name="M:System.DateTimeExtensions.GetEndOfDay(System.DateTime)">
            <summary>
            Get the end of the day
            </summary>
            <param name="date">Date</param>
            <returns>End of the day, 23:59:59</returns>
        </member>
        <member name="M:System.DateTimeExtensions.To(System.DateTime,System.DateTime)">
            <summary>
            Get a sequence between days
            </summary>
            <param name="start">Start date</param>
            <param name="end">End date</param>
            <returns>Sequence of whole days</returns>
        </member>
        <member name="M:System.DateTimeExtensions.ToDayParts(System.DateTime,System.Int32)">
            <summary>
            Get parts of a day from a date
            </summary>
            <param name="date">Date</param>
            <param name="numberOfParts">Nbr of parts</param>
            <returns>A sequence of tuples where item1 is starttime and item2 is the endtime</returns>
        </member>
        <member name="M:System.DateTimeExtensions.GetIso8601Week(System.DateTime)">
            <summary>
            Get the year and week from a DateTime 
            </summary>
            <param name="time"></param>
            <returns>A tuple where Item1 is the year and Item2 is the week</returns>
        </member>
        <member name="M:System.DateTimeExtensions.FirstDateOfWeekIso8601(System.Tuple{System.Int32,System.Int32})">
            <summary>
            Get the first date of a week from a tuple of year and week
            </summary>
            <param name="yearAndWeek"></param>
            <returns>The first date of a week</returns>
        </member>
        <member name="T:System.EventHandlerExtensions">
            <summary>
            Extension methods for the .NET Eventhandler class
            </summary>
        </member>
        <member name="M:System.EventHandlerExtensions.FireEvent(System.EventHandler{System.EventArgs},System.Object)">
            <summary>
            Fire an event for the eventhandler
            </summary>
            <param name="handler">the event handler</param>
            <param name="sender">The sending object</param>
        </member>
        <member name="M:System.EventHandlerExtensions.FireEvent``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Fire an event for the eventhandler
            </summary>
            <typeparam name="T">Type of arguments</typeparam>
            <param name="handler">The Event Handler</param>
            <param name="sender">The sending object</param>
            <param name="args">Arguments</param>
        </member>
        <member name="T:System.ObjectExtensions">
            <summary>
            Extension methods for the .NET object type
            </summary>
        </member>
        <member name="M:System.ObjectExtensions.ThrowOnNull(System.Object,System.String)">
            <summary>
            if the value is null throw an exception
            </summary>
            <param name="value">object to check</param>
            <param name="message">Exception message</param>
        </member>
        <member name="M:System.ObjectExtensions.ThrowOnNull(System.Object,System.String,System.Object[])">
            <summary>
            if the value is null throw an exception
            </summary>
            <param name="value">object to check</param>
            <param name="message">Exception message</param>
            <param name="args">Format parameters</param>
        </member>
        <member name="T:System.Linq.IEnumerableExtensions">
            <summary>
            Implements extension methods for IEnumerable
            </summary>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a System.Collection.Generic.HashSetOfT from a System.Collection.Generic.IEnumerableOfT
            </summary>
            <typeparam name="T">The type of the elements in collection</typeparam>
            <param name="collection">Source collection</param>
            <returns>A System.Collections.Generic.HashSetOfT that contains elements from the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.ToReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a System.Collection.Generic.HashSetOfT from a System.Collection.Generic.IEnumerableOfT
            </summary>
            <typeparam name="T">The type of the elements in collection</typeparam>
            <param name="collection">Source collection</param>
            <returns>A System.Collections.Generic.HashSetOfT that contains elements from the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Creates a System.Collection.Generic.ListOfT from a System.Collection.Generic.IEnumerableOfT with the possibility to set a initial size of the new list.
            </summary>
            <typeparam name="T">The type of the elements in collection</typeparam>
            <param name="collection">Source collection</param>
            <param name="capacity">The number of elements that the new list can initially store.</param>
            <returns>A System.Collections.Generic.ListOfT that contains elements from the input sequence.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">capacity is less than 0.</exception>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterate through the collection and do an action with each item
            </summary>
            <typeparam name="T">The type of the elements in collection</typeparam>
            <param name="collection">Source collection</param>
            <param name="action">The action to perform</param>
            <returns>the collection that was the input</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <typeparam name="T">The type of the elements in collection</typeparam>
            <param name="collection">Source collection</param>
            <param name="value">The default value to use if the collection was empty</param>
            <returns>The first element or the default</returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Pairwise``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
            <summary>
            Pairs the seq [x1,x2,x3,x4] => [ (null,x1), (x1,x2), .. (x3,x4)]
            </summary>
            <typeparam name="TSequence"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="seq"></param>
            <param name="resultSelector"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Buffer``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="seq"></param>
            <param name="nbr"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.UnwrapAsync``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Create a list of the sequence and wait for all the tasks and then return the results of the tasks as a new sequence
            </summary>
            <typeparam name="T"></typeparam>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.DoAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="seq"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.IEnumerableExtensions.Where``1(System.Collections.Generic.List{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="seq"></param>
            <param name="pred"></param>
            <returns></returns>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            Extensions to the .NET string class
            </summary>
        </member>
        <member name="M:System.StringExtensions.Clean(System.String,System.String)">
            <summary>
            Clean the string from chars that don't belong
            </summary>
            <param name="input">String to clean</param>
            <param name="charsToClean">chars that should be removed from the string</param>
            <returns>A cleaned string</returns>
        </member>
        <member name="M:System.StringExtensions.IsEmailAddress(System.String)">
            <summary>
            Validates a string to see if it's an email address
            </summary>
            <param name="email">String to check</param>
            <returns>true if the string is an email address</returns>
        </member>
        <member name="M:System.StringExtensions.IsNothing(System.String)">
            <summary>
            Checks if the string is null, empty or just contains whitespaces
            </summary>
            <param name="thisValue">String to check</param>
            <returns>True if nothing</returns>
        </member>
        <member name="M:System.StringExtensions.IsSome(System.String)">
            <summary>
            Checks that the string is not null, empty or just containing whitespaces
            </summary>
            <param name="thisValue">String to check</param>
            <returns>True if the string is something</returns>
        </member>
        <member name="M:System.StringExtensions.IsNumeric(System.String)">
            <summary>
            Check if the string just have numeric characters
            </summary>
            <param name="thisValue">String to check</param>
            <returns>True if the string just has numeric characters</returns>
        </member>
        <member name="M:System.StringExtensions.Truncate(System.String,System.Int32,System.String)">
            <summary>
            Truncate a string if it's exceeds a threashold value
            </summary>
            <param name="thisValue">String to truncate</param>
            <param name="length">Length of the resulting string</param>
            <param name="add"></param>
            <returns>Truncated string</returns>
        </member>
        <member name="M:System.StringExtensions.ToInt32(System.String)">
            <summary>
            Parse a string and convert it to a 32 bit integer
            </summary>
            <param name="thisValue">String to parse</param>
            <returns>null if the string wasn't a integer, otherwise the parsed integer</returns>
        </member>
        <member name="M:System.StringExtensions.ToDecimal(System.String)">
            <summary>
            Parse a string and convert it to a decimal
            </summary>
            <param name="thisValue">String to parse</param>
            <returns>null if the string wasn't a decimal, otherwise the parsed decimal</returns>
        </member>
        <member name="M:System.StringExtensions.ToInt64(System.String)">
            <summary>
            Parse a string and convert it to a 64 bit long
            </summary>
            <param name="thisValue">String to parse</param>
            <returns>null if the string wasn't a long, otherwise the parsed long</returns>
        </member>
        <member name="M:System.StringExtensions.ThrowOnNothing(System.String,System.String,System.Object[])">
            <summary>
            if the string is nothing throw a komon argument exception
            </summary>
            <param name="obj">string to check</param>
            <param name="message">Exception message</param>
            <param name="args">Format parameters</param>
        </member>
        <member name="M:System.StringExtensions.Remove(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="strings"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.ReplaceLastOccurrence(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="search"></param>
            <param name="replace"></param>
            <returns></returns>
        </member>
        <member name="M:System.StringExtensions.ReplaceFirstOccurrence(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="search"></param>
            <param name="replace"></param>
            <returns></returns>
        </member>
    </members>
</doc>
